(window.webpackJsonp=window.webpackJsonp||[]).push([[444],{1072:function(n,e){n.exports='\x3c!--\ntitle: 28-JSDOM\nsort:\n--\x3e\n\n> `Document Object Model`\n>\n> 将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作。\n\n## 常用\n\n```js\n// 元素\ndocument.querySelector(".demo");\ndocument.createElement("canvas");\n\n// 操作\nlet demo = document.createElement("#demo");\n// 末尾插入元素\ndemo.insertAdjacentHTML("beforeend", `<option value="new">123</option>`);\ndemo.value; // 获取元素的值\ndemo.innerHTML = "<p>demo</p>"; // 增加内容\ndemo.click(); // 模拟点击\n// class操作\ndemo.classList.add("disable"); // 为元素增加类\ndemo.classList.remove("disable"); // 为元素减少类\ndemo.classList.replace("enable", "disable"); // 为元素替换类\n```\n\n## Document 节点\n\n### 属性\n\n```js\n// 滚动元素\n// 页面滚动到浏览器顶部\ndocument.scrollingElement.scrollTop = 0;\n// 焦点元素\ndocument.activeElementhref;\n// 节点集合\n// 返回HTMLCollection\ndocument.links;\ndocument.forms;\ndocument.images;\ndocument.scripts;\ndocument.styleSheets;\n\n// 静态信息\ndocument.URL;\ndocument.domain;\ndocument.location;\ndocument.title;\n\n// 状态属性\ndocument.hidden;\ndocument.visibilityState;\ndocument.readyState; // 案例1\ndocument.cookie;\ndocument.designMode = "on";\n```\n\n### 方法\n\n```js\ndocument.open();\ndocument.write("<p>hello world</p>");\ndocument.querySelector(".class");\ndocument.querySelectorAll("p");\ndocument.getElementsByTagName("p");\ndocument.getElementsByClassName("container");\ndocument.getElementById();\n// 获取坐标位置的html元素\ndocument.elementFromPoint(500, 500);\ndocument.createElement("div");\n// 转义防止XSS\nvar div = document.createElement("div");\ndiv.appendChild(document.createTextNode("<span>Foo & bar</span>"));\n// 插入属性\nattr = document.createAttribute("onClick");\nattr.value = "main.js";\nnode.setAttributeNode(a);\nnode.setAttribute("onClick", "main.js");\n// 事件监听\n// 创建事件\nvar event = document.createEvent("Event");\n// 初始化事件\nevent.initEvent("build", true, true);\n// 添加事件监听函数\ndocument.addEventListener("build", () => alert("event"), false);\n// 触发事件\ndocument.dispatchEvent(event);\n// 移除监听(不能为匿名函数)\ndocument.removeEventListener("build", () => alert("event"), false);\n// 子节点遍历器\nvar nodeIterator = document.createNodeIterator(document.body);\nnodeIterator.nextNode();\n```\n\n### 实例\n\n1. 文档加载\n\n```js\nvar interval = setInterval(function () {\n  if (document.readyState === "complete") {\n    console.log("Loading Complete");\n    clearInterval(interval);\n    // ...\n  }\n}, 100);\n```\n\n2. 更改 title\n\n```js\nvar OriginTitile = document.title,\n  titleTime;\ndocument.addEventListener("visibilitychange", function () {\n  if (document.hidden) {\n    document.title = "为什么离开我了QWQ";\n    clearTimeout(titleTime);\n  } else {\n    document.title = "AWA咦！欢迎回来QWQ！ " + OriginTitile;\n    titleTime = setTimeout(function () {\n      document.title = OriginTitile;\n    }, 1000);\n  }\n});\n```\n\n## Node 接口\n\n### 属性\n\n```js\n// 节点类型\ndocument.nodetype;\n// 绝对路径\ndocument.baseURL;\ntest = document.getElementById("test");\n// 节点名称\ntest.nodeName;\n// 文本值\ntest.nodeValue;\n// 节点及所有后代文本内容\ntest.textContent;\n// 顶层文档对象\ntest.ownerDocument;\n// 同级节点\ntest.nextSibling;\ntest.previousSibling;\n// 父节点 删除子节点\ntest.parentNode.removeChild(node);\n// 父元素节点\ntest.parentElement;\n// 子节点 第一个 最后一个\ntest.firstChild / lastChild;\n// 全部子节点\ntest.childNodes;\n// 判断节点是否在文档之中\nvar test1 = document.createElement("p");\ntest1.isConnected; // false\n\ndocument.body.appendChild(test1);\ntest1.isConnected; // true\n```\n\n### 方法\n\n```js\n// 插入节点\nvar p = document.createElement("p");\ndocument.body.appendChild(p);\n// 当前节点是否子节点\ntest.hasChildNodes();\n// 克隆子节点\ntest.cloneNode(true);\n// 要插入的节点newNode,\n// 插在父节点parentNode的子节点referenceNode之前\nvar insertedNode = parentNode.insertBefore(newNode, referenceNode);\n// 删除节点\ntest.parentNode.removeChild(test);\n// 替换节点\nparentNode.replaceChild(newChild, oldChild);\n// 是否包含\ndocument.body.contains(test);\n// 包含判断\nvar head = document.head;\nvar body = document.body;\nif (head.compareDocumentPosition(body) & 4) {\n  console.log("文档结构正确");\n} else {\n  console.log("<body> 不能在 <head> 前面");\n}\n// 节点是否相等\nvar p1 = document.createElement("p");\nvar p2 = document.createElement("p");\n\np1.isEqualNode(p2); // true\np1.isSameNode(p2); // false\n// 合并文本节点\ntest.normalize();\n```\n'}}]);