(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{938:function(n,e){n.exports="\x3c!--\ntitle: 42-Socket编程\nsort:\n--\x3e\n\n# Socket 编程\n\n## 入门\n\n### 创建 tcp/udp 套接字\n\n```python\nimport socket\n\nudp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nupd_socket.close()\n```\n\n`socket.socker(AdressFamily, Type)`\n\n> 参数一：\n>\n> `socket.AF_INET` IPv4\n>\n> 参数二：\n>\n> `socket.SOCK_DGRAM` UDP\n>\n> `SOCK_STREAM` TCP\n\n### 使用\n\n#### 发送\n\n```python\nimport socket\n\nudp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\nudp.sendto(\"hello\".encode(), (\"192.168.0.101\",777))\nudp.close()\n```\n\n#### 接收\n\n```python\nimport socket\n\nudp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp.bind(('', 9999))\n\nudp.sendto(\"hello\".encode(), ('127.0.0.1',40404))\n\nrecv = udp.recvfrom(1024)\nprint(recv[0].decode('gbk'))\n\nudp.close()\n```\n\n### 广播\n\n> 广播地址：255.255.255.255 xxx.xxx.xxx.255\n\n```python\n# SOL_SOCKET 当前套接字\n# SO_BROADCAST 广播\n# 设置套接字参数（套接字，参数名，参数）\nudp.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, True)\nudp.sendto(\"hello\".encode(), ('255.255.255.255',8080))\n\n```\n\n## TCP\n\n### 客户端\n\n```python\nimport socket\n\ntcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 服务端信息\ntcp.connect(('127.0.0.1',8080))\n# 发送\ntcp.send('hi~'.encode('gbk'))\n\ncontent = tcp.recv(1024).decode('gbk')\nprint(content)\n```\n\n### 服务端\n\n```python\nimport socket\n\ntcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 绑定地址\ntcp.bind(('',8080))\n# 设置监听，不得主动发送数据，最大连接数为128\ntcp.listen(128)\n# 自动进入阻塞状态，等待连接，返回socket对象\n# recv[0]为socket对象，[1]为客户端地址\nclient_socket, client_addr = tcp.accept()\n# 设定接收\nrecv_text = client_socket.recv(1024).decode('gbk')\nprint(recv_text)\n\nclient_socket.close()\ntcp.close\n```\n\n#### 增强\n\n```python\nimport socket\n\ntcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntcp.bind(('',8080))\ntcp.listen(128)\n\nclient_socket, client_addr = tcp.accept()\n\nwhile True:\n    recv_text = client_socket.recv(1024).decode('gbk')\n    if recv_text:\n        print(recv_text)\n        client_socket.send('I get your message.'.encode())\n    else:\n        print(\"Client Close!\")\n        break\n\nclient_socket.close()\ntcp.close()\n```\n\n- 地址重用\n\n  ```python\n  # SOL_SOCKET 当前套接字\n  # socket.SO_REUSEADDR 重用地址 reuseaddr\n  # 设置套接字参数（套接字，参数名，参数）\n  tcp.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)  python、python\n  ```\n\n## HTTP\n\n### 基本\n\n```python\nimport socket\n\nhttp_header = 'HTTP/1.1 200 OK\\r\\n\\r\\n'\ncontent = '<h1>Hello</h1>'\nresponse = http_header+content\n\ntcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntcp.bind(('',8080))\ntcp.listen(128)\n\nclient_socket, client_addr = tcp.accept()\nrecv_text = client_socket.recv(1024).decode('gbk')\nif recv_text:\n    print(recv_text)\n    client_socket.send(response.encode())\nelse:\n    print(\"Client Close!\")\n\nclient_socket.close()\ntcp.close()\n```\n"}}]);