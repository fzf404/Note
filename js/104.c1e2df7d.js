(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{732:function(n,e){n.exports='\x3c!--\ntitle: 03-通信\nsort:\n--\x3e\n\n## IPC\n\n> 从主进程到渲染进程的异步通信。\n\n- 主进程\n\n```js\nconst { app, BrowserWindow, ipcMain } = require("electron");\n\n// 接受渲染进程发来的消息\nipcMain.on("asynchronous-message", (event, args) => {\n  const reply = args.split("").reverse().join("");\n  console.log("reply: ", reply);\n  // 发送消息到渲染进程\n  event.reply("asynchronous-reply", reply);\n});\n```\n\n- 渲染进程\n\n```html\n<div>\n  <input type="text" id="message" />\n  <br />\n  <button id="submit">Submit</button>\n</div>\n<script>\n  const { ipcRenderer } = require("electron");\n  document.getElementById("submit").onclick = () => {\n    let message = document.getElementById("message").value;\n    // 向主进程发消息\n    ipcRenderer.send("asynchronous-message", message);\n  };\n  // 接收消息\n  ipcRenderer.on("asynchronous-reply", (event, args) => {\n    alert(args);\n  });\n<\/script>\n```\n\n## remote\n\n> 在渲染进程中使用主进程模块。\n\n- 主进程\n\n```js\nwebPreferences: {\n\tnodeIntegration: true,\n\tenableRemoteModule: true\n}\n```\n\n- 渲染进程\n\n```js\nconst { remote } = require("electron");\nconst BrowserWindow = remote.BrowserWindow;\nlet win = new BrowserWindow({ width: 500, height: 400 });\nwin.loadURL("https://google.com");\n```\n\n## WebContents\n\n> 渲染以及控制 web 页面\n'}}]);