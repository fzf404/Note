(window.webpackJsonp=window.webpackJsonp||[]).push([[316],{944:function(n,e){n.exports="\x3c!--\ntitle: A1-机器学习入门\nsort:\n--\x3e\n\n# 机器学习入门\n\n## 术语\n\n- 标签\n\n  > **标签**是我们要预测的事物，\n  >\n  > 即简单线性回归中的 `y` 变量。\n  >\n  > 可以是小麦未来的价格、图片中显示的动物品种、音频剪辑的含义或任何事物。\n\n- 特征\n\n  > **特征**是输入变量，\n  >\n  > 即简单线性回归中的 `x` 变量。\n  >\n  > 在垃圾邮件检测器示例中，特征可能包括：\n  >\n  > - 电子邮件文本中的字词\n  > - 发件人的地址\n  > - 发送电子邮件的时段\n  > - 电子邮件中包含“一种奇怪的把戏”这样的短语。\n\n### 样本\n\n> **样本**是指数据的特定实例：**x**\n>\n> 将样本分为以下两类：\n>\n> - 有标签样本\n>\n>   > 同时包含特征和标签\n>\n> - 无标签样本\n>\n>   > 包含特征但不包含标签\n\n### 模型\n\n> 标签与特征间的关系\n\n## 基本方法\n\n- 迭代\n\n  > “模型”部分将一个或多个特征作为输入\n  >\n  > 然后返回一个预测 (y') 作为输出\n  >\n  > 机器学习系统将根据所有标签重新评估所有特征\n  >\n  > 为损失函数生成一个新值\n  >\n  > 直到该算法发现损失可能最低的模型参数\n  >\n  > 该模型已**收敛**\n\n- 梯度下降\n\n  > 回归问题产生的损失与权重图为凸形\n  >\n  > 损失相对于单个权重的梯度等于导数(矢量)\n  >\n  > 梯度下降法算法用梯度乘以一个称为**学习速率**（有时也称为**步长**）的标量\n\n## 线性回归\n\n$y'=b+w1x1$\n\n- y' 指的是预测[标签](https://developers.google.cn/machine-learning/crash-course/framing/ml-terminology#labels)（理想输出值）。\n- b 指的是偏差（y 轴截距）。而在一些机器学习文档中，它称为 w0。\n- w1 指的是特征 1 的权重。权重与上文中用 m 表示的“斜率”的概念相同。\n- x1 指的是[特征](https://developers.google.cn/machine-learning/crash-course/framing/ml-terminology#features)（已知输入项）。\n\n更复杂的模型：$y'=b+w1x1+w2x2+w3x3$\n\n## TensorFlow\n\n> TensorFlow 由以下两个组件组成：\n>\n> - [图协议缓冲区](https://www.tensorflow.org/extend/tool_developers/#protocol_buffers)\n> - 执行（分布式）图的运行时\n>\n> 参数\n>\n> - **steps**：训练迭代的总次数。\n> - **batch size**：单步的样本数量（随机选择）。\n>\n> - $all = natch*steps$\n\n### tf.estimator API\n\n- 第一个机器学习程序\n\n  ```python\n  import tensorflow as tf\n\n  # Set up a linear classifier.\n  classifier = tf.estimator.LinearClassifier()\n\n  # Train the model on some example data.\n  classifier.train(input_fn=train_input_fn, steps=2000)\n\n  # Use it to predict.\n  predictions = classifier.predict(input_fn=predict_input_fn)\n  ```\n"}}]);