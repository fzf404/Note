(window.webpackJsonp=window.webpackJsonp||[]).push([[302],{930:function(n,t){n.exports="\x3c!--\ntitle: 32-BeautSoup4\nsort:\n--\x3e\n\n# Beautiful Soup 4\n\n> 从 HTML 或 XML 文件中提取数据的 Python 库。\n\n## 快速开始\n\n- `BeautifulSoup` 对象\n\n  ```python\n  from bs4 import BeautifulSoup\n\n  html_doc = '''...'''\n\n  soup = BeautifulSoup(html_doc, 'html.parser')\t# 创建对象，解释器为html。\n  ```\n\n- 对象操作\n\n  ```python\n  soup.prettify()\t\t# 按照标准缩进输出\n  soup.title\t\t# 标题标签\n  # <title>The Dormouse's story</title>\n  soup.title.name\t\t# 标题名称\n  soup.title.string\t# 标题内容\n  soup.title.parent.name\t\t# 父标签名称\n  # head\n  soup.p\t\t\t# 段落标签\n  <p class=\"title\"><b>The Dormouse's story</b></p>\n  soup.p[class]\t# class属性\n  soup.a\t\t# 第一a标签\n  print(soup.find_all('a'))\t# 全部a标签\n  # 寻找所有a标签的链接\n  for link in soup.find_all('a'):\n      print(link.get('href'))\n      # http://example.com/elsie\n      # http://example.com/lacie\n      # http://example.com/tillie\n  soup.get_text()\t\t# 获得所有文字信息\n  ```\n\n## 对象种类\n\n> 所有对象可以归纳为 4 种: `Tag` , `NavigableString` , `BeautifulSoup` , `Comment` .\n\n### Tag\n\n`Tag` 对象与 XML 或 HTML 原生文档中的 tag 相同:\n\n```python\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>')\ntag = soup.b\ntype(tag)\n# <class 'bs4.element.Tag'>\n```\n\n介绍一下 tag 中最重要的属性: name 和 attributes\n\n- Name\n\n  > 每个 tag 都有自己的名字,通过 `.name` 来获取:`tag.name`\n  >\n  > 如果改变 tag 的 name,那将影响所有通过当前 Beautiful Soup 对象生成的 HTML 文档:`tag.name = \"blockquote\"`\n\n- Attributes\n\n  > 一个 tag 可能有很多个属性。\n  >\n  > `<b class=\"boldest\">`\n  >\n  > 有一个 “class” 的属性,值为 “boldest” 。\n  >\n  > tag 的属性的操作方法与字典相同:\n  >\n  > `tag['class']`\n  >\n  > 也就是说可以删除与修改\n  >\n  > 可以直接”点”取属性, 比如: `.attrs` :\n  >\n  > `tag.attrs # {u'class': u'boldest'}`\n\ntag 的属性可以被添加,删除或修改. 再说一次, tag 的属性操作方法与字典一样\n\n- 多值属性\n\n  > 一个 tag 可以有多个 CSS 的 class。在 Beautiful Soup 中多值属性的返回类型是 list:\n  >\n  > ```python\n  > css_soup = BeautifulSoup('<p class=\"body strikeout\"></p>')\n  > css_soup.p['class']\n  > # [\"body\", \"strikeout\"]\n  >\n  > css_soup = BeautifulSoup('<p class=\"body\"></p>')\n  > css_soup.p['class']\n  > # [\"body\"]\n  > ```\n\n#### 可以遍历的字符串\n\n> Beautiful Soup 用 `NavigableString` 类来包装 tag 中的字符串:\n>\n> ```python\n> tag.string\n> # u'Extremely bold'\n> type(tag.string)\n> # <class 'bs4.element.NavigableString'>\n> unicode_string = str(tag.string)\t# 类型转换\n> ```\n\n## 遍历文档树\n\n- `soup.find_all('a')`\n\n- `tag.contents`\n\n  > 将 tag 的子节点以列表的方式输出\n  >\n  > `tag.children`: 生成器\n\n- `tag..descendants`\n\n  > 包括字符串的子孙节点\n\n- `tag.string`\n\n  > 如果 tag 只有一个 `NavigableString` 类型子节点\n  >\n  > 那么这个 tag 可以使用 `.string` 得到子节点。\n  >\n  > 如果 tag 中包含多个字符串 ,可以使用 `.strings` 来循环获取\n  >\n  > 使用 `.stripped_strings` 可以去除多余空白内容\n\n### 父节点\n"}}]);