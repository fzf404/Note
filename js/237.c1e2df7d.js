(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{865:function(n,t){n.exports='\x3c!--\ntitle: 03-Rust进阶\nsort:\n--\x3e\n\n### 数据操作\n\n```rust\n// 存在栈Stack上的Int\nlet i = 5;\n// 存在堆Heap上的String\nlet mut s = String::from("Hello");\ns.push_str(" World");\n\n// 字符串引用 &str\nlet str = "Hello World";\n\n// &str 转为 String\ns = str.to_owned()\n\n// 复制Copy\nlet j = i;\n\n// 移动Move\n// s的所有权移给s2，s失效,指针赋给s2\nlet s2 = s;\n\n// 克隆Clone，s不失效\nlet s2 = s.clone();\n\n// 引用\n// 引用某些值而不获得所有权\nlet s1 = &s;\nlet s2 = &mut s;    // 可变引用\n\n\n// 切片 &t\n// 对于字符串中某一长度数组的引用\n&s[..3]\n// 这也是切片\nlet s = "Hello World!"\n\n// 例子\nfn first_word(s: &String) -> &str {\n  // 转换为&[u8]\n  let bytes = s.as_bytes();\n  // 遍历\n  for (i, &item) in bytes.iter().enumerate() {\n    if item == b\' \' {\n      return &s[..i];\n    }\n  }\n  &s[..]\n}\n```\n\n### Module\n\n```rust\n// lib.rs\nmod eat {\n    pub struct Breakfast {\n        pub staple: String,\n        fruit: String,\n    }\n    impl Breakfast {\n        pub fn rice(fruit: &str) -> Breakfast {\n            Breakfast {\n                staple: String::from("rice"),\n                fruit: String::from(fruit),\n            }\n        }\n    }\n}\n\npub fn eat_normal() {\n    let meal = eat::Breakfast::rice("apple");\n    println!("{}", meal.staple);\n}\n\n/\nuse eat::Breakfast;\n\n// main.rs\ninclude!("lib.rs");\nfn main() {\n    eat_normal();\n}\n```\n'}}]);