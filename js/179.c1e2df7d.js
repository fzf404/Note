(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{807:function(n,e){n.exports='\x3c!--\ntitle: 04-进入内核\nsort:\n--\x3e\n\n> 分成两个文件：\n>\n> `Loader.asm`&`Kernal.asm`\n>\n> 这时不需要减去 512 字节的偏移地址\n\n```bash\n# 连接两个文件\ncopy /b /Y 2-Loader.bin+3-Kernel.bin Boot.bin\n```\n\n## 颜色\n\n| 二进制数 | 颜色       | 例子          |\n| -------- | ---------- | ------------- |\n| 0000     | 0-黑色     | black         |\n| 0001     | 1-蓝色     | blue          |\n| 0010     | 2-绿色     | green         |\n| 0011     | 3-青色     | cyan          |\n| 0100     | 4-红色     | red           |\n| 0101     | 5-紫红色   | magenta       |\n| 0110     | 6-棕色     | brown         |\n| 0111     | 7-银色     | light gray    |\n| 1000     | 8-灰色     | gray          |\n| 1001     | 9-淡蓝色   | light blue    |\n| 1010     | A-淡绿色   | light green   |\n| 1000     | B-淡青色   | light cyan    |\n| 1100     | C-淡红色   | light red     |\n| 1101     | D-淡紫红色 | light magenta |\n| 1110     | E-黄色     | yellow        |\n| 1111     | F-白色     | white         |\n\n## FAT 文件\n\n> Loader 放在软盘的第 1 扇区\n>\n> 必须要严格遵守 FAT 格式 BPB 结构\n>\n> 再把 Kernel 以文件方式放到软盘里\n\n- `Loader.asm`\n\n```asm\njmp short start     ;  jmp short 占位2字节\n\nDB  0x90            ; 第三字节必须为90\nDB  "FZF40404"      ; 8字节名称\nDW  512\nDB  1               ; 簇(cluster)的大小必须为1个扇区\nDW  1               ; FAT的起始位置(一般从第一个扇区开始)\nDB  2               ; FAT的个数(必须为2)\nDW  224             ; 根目录的大小(一般设为244项)\nDW  2880            ; 该磁盘的的大小(必须为2880扇区)\nDB  0xf0            ; 磁盘的种类(必须为0xfd)\nDW  9               ; FAT的长度(必须为9扇区)\nDW  18              ; 一个磁道(track)有几个扇区(必须为18)\nDW  2               ; 磁头数(必须为2)\nDD  0               ; 不使用分区(必须为0)\nDD  2880            ; 重写一次磁盘大小\nDB  0,0,0x29        ; 意义不明，固定\nDD  0xffffffff      ; (可能是)卷标号码\nDB  "FZF-OS-DISC"   ; 磁盘名称(11字节)\nDB  "FAT12   "      ; 磁盘格式名称(8字节)\nRESB    18          ; 先腾出18字\n```\n\n## 制作镜像\n\n> 使用 WinImage\n\n```\n->Image -> Boot sector properties -> Open...\n>Loader.bin\n@See Oem string & Serial Number\n->OK\nLoad Kernel.bin\nSave as boot.IMA\n```\n'}}]);