(window.webpackJsonp=window.webpackJsonp||[]).push([[274],{902:function(n,t){n.exports="\x3c!--\ntitle: 02-Python正则\nsort:\n--\x3e\n\n## 描述字符\n\n- 单个字符\n\n  > 单个字符可直接输入\n  >\n  > `\\`：转义\n  >\n  > `\\d`：单个随机数字\n  >\n  > `\\w`：单个随机字母\n  >\n  > `\\s`：单个空格\n  >\n  > 大写即为非 x\n  >\n  > `.`：任意字符\n  >\n  > `[]`匹配[]中的单词\n  >\n  > 还可以指定范围`[a-g0]`\n\n- 多字符匹配\n\n  > `任意字符`：匹配所有\n  >\n  > `*`：任意数量字符（包括 0 个）\n  >\n  > `?`：0 或 1 个\n  >\n  > `+`：至少一个\n  >\n  > ​ `[]+`：多次匹配[]中的字符\n  >\n  > `{m}`：匹配一个字符出现 m 次\n  >\n  > ​ `[0-9]{4}`：匹配四次数字\n  >\n  > `{n,m}`：n-m 个字符\n  >\n  > ​ `\\w{4,10}`：4-10 为数字\n\n- 其他\n\n  > `^$`开头与结尾\n  >\n  > `^`：在[]中则为取反\n  >\n  > `\\\\num`：引用()中的分组\n  >\n  > `(?P<name>[a-zA-Z0-])`：设置别名\n  >\n  > `(?P=name)`：使用别名\n\n- 整理\n\n  | 元字符 | 描述                                                   |\n  | ------ | ------------------------------------------------------ | --- |\n  | .      | 匹配除换行符以外的任意字符。                           |\n  | [ ]    | 字符类，匹配方括号中包含的任意字符。                   |\n  | [^ ]   | 否定字符类。匹配方括号中不包含的任意字符               |\n  | \\*     | 匹配前面的子表达式零次或多次                           |\n  | +      | 匹配前面的子表达式一次或多次                           |\n  | ?      | 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。 |\n  | {n,m}  | 花括号，匹配前面字符至少 n 次，但是不超过 m 次。       |\n  | (xyz)  | 字符组，按照确切的顺序匹配字符 xyz。                   |\n  | \\|     | 分支结构，匹配符号之前的字符或后面的字符。             |\n  | \\      | 转义符允许你匹配保留字符 `[ ] ( ) { } . \\* + ? ^ $ \\   | `   |\n  | ^      | 匹配行的开始                                           |\n  | $      | 匹配行的结束                                           |\n\n- 字符集\n\n```\n\"[Tt]he\" => The car parked in the garage.\t# 匹配T/t\n```\n\n- 重复\n\n```\n\"[a-z]*\" => The car parked in the garage #21.\t# car parked in the garage\n```\n\n## 断言\n\n- 用于匹配但不存在与结果之中\n\n  | 符号 | 描述         |\n  | ---- | ------------ |\n  | ?=   | 正向先行断言 |\n  | ?!   | 负向先行断言 |\n  | ?<=  | 正向后行断言 |\n  | ?<!  | 负向后行断言 |\n\n```python\n\"(T|t)he(?=\\sfat)\" \t\t\t# 匹配后方跟着fat的the\n\"(T|t)he(?!\\sfat)\"\t\t\t# 匹配后方没有fat的the\n\"(?<=(T|t)he\\s)(fat|mat)\"\t# 获取挨着the的所有fat/mat\n\"(?<!(T|t)he\\s)(cat)\"\t\t# 获取不挨着the的所有cat\n```\n\n## 标记\n\n| 标记 | 描述                   |\n| ---- | ---------------------- |\n| /g   | 全局搜索               |\n| /i   | 不区分大小写           |\n| /.   | 除换行符外的所有字符   |\n| /m   | 多行匹配 /.fzf(.)?$/gm |\n\n## 常用正则表达式\n\n- **正整数**: `^\\d+$`\n- **负整数**: `^-\\d+$`\n- **电话号码**: `^+?[\\d\\s]{3,}$`\n- **电话代码**: `^+?[\\d\\s]+(?[\\d\\s]{10,}$`\n- **整数**: `^-?\\d+$`\n- **用户名**: `^[\\w\\d_.]{4,16}$`\n- **字母数字字符**: `^[a-zA-Z0-9]*$`\n- **带空格的字母数字字符**: `^[a-zA-Z0-9 ]*$`\n- **密码**: `^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$`\n- **电子邮件**: `^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$`\n- **IPv4 地址**: `^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$`\n- **小写字母**: `^([a-z])*$`\n- **大写字母**: `^([A-Z])*$`\n- **网址**: `^(((http|https|ftp):\\/\\/)?([[a-zA-Z0-9]\\-\\.])+(\\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\\/+=%&_\\.~?\\-]*))*$`\n- **VISA 信用卡号码**: `^(4[0-9]{12}(?:[0-9]{3})?)*$`\n- **日期 (MM/DD/YYYY)**: `^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$`\n- **日期 (YYYY/MM/DD)**: `^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$`\n- **万事达信用卡号码**: `^(5[1-5][0-9]{14})*$`\n\n## **精确匹配**\n\n- 使用[]表示范围\n  > 可在[]后方加入匹配字符用于扩展\n  >\n  > - `[a-zA_Z\\_][0-9a-zA-Z\\_]{1-20}`：python 中的合法变量\n  >\n  > `(p|P)ython`：匹配 python\n  >\n  > `^ $`：匹配开头或结尾\n\n## RE 库\n\n- 使用正则表达式\n\n  > 可直接传入字符串，但转义符需要双写\n  >\n  > 或者：`r'fzf\\d{0.3}'`\n\n- 判断是否匹配\n\n  > `re.match(re,str)`\n  >\n  > 返回`.group()`\n\n  ```python\n  test = '用户输入的字符串'\n  if re.match(r'正则表达式', test):\n    print('ok')\n  else:\n    print('failed')\n  ```\n\n- **切分字符串**\n\n  > `re.split(r'\\s+', a b\n  >\n  > 强于`str.split()`\n\n- 分组\n\n  > 使用`()`分组\n  >\n  > 可以使用`group`提取\n  >\n  > ```python\n  > m = re.match(r'^(\\d{3})-(\\d{3,8})$', '010-12345')\n  >\n  > m.groups()\n  > ('010', '12345')\n  > m.group(0)\t# 原始字符串\n  > '010-12345'\n  > m.group(1)\n  > '010'\n  > m.group(2)\n  > '12345'\n  > ```\n\n- 匹配方式\n\n  > 默认为贪婪匹配\n  >\n  > 添加？可以尽量少匹配\n\n- **编译方式**\n\n  > 可以预编译表达时，提高效率\n  >\n  > `cop = re.compile(re)`\n\n### 高级用法\n\n```python\n# 搜索一次，从任意位置匹配\n# match之从开头匹配，不满足则None\nre.search('\\d{3}', \"高考分数：721\")\n#搜索全部，返回列表\nre.findall('\\d{3}', \"高考分数：721 语文：142 数学：148\")\n# 替换\nre.sub('RE', 'New Content', 'Str')\nre.sub('\\d{3}', '100', \"高考分数：721 语文：142 数学：148\")\n```\n"}}]);