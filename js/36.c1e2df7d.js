(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{664:function(n,e){n.exports="\x3c!--\ntitle: 06-TensorFlow\nsort:\n--\x3e\n\n# TensorFlow\n\n> 机器学习框架\n\n### 过程\n\n1. 导入数据\n2. 设置层数分布\n3. 设置模型\n4. 训练\n5. 测试\n\n```python\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 获得MNIST_Fashion数据集\nfashion_mnist = keras.datasets.fashion_mnist\n# 两个集合，每个集合中两个np数组\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n\n# 标签名称\nclass_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\n# 测试集的形状\ntrain_images.shape\nlen(train_labels)\n\n# 展示图片\nplt.figure()\nplt.imshow(train_images[5])\nplt.colorbar()\nplt.show()\n\n# 数据预处理\ntrain_images = train_images / 255.0\ntest_images = test_images / 255.0\n\n# 展示图片及标签\nplt.figure(figsize=(10,10))\nfor i in range(25):\n  plt.subplot(5,5,i+1)\n  # 隐藏坐标信息\n  plt.xticks([])\n  plt.yticks([])\n  plt.imshow(train_images[i], cmap=plt.cm.binary)\n  plt.xlabel(class_names[train_labels[i]])\nplt.show()\n\n# 设置层\nmodel = keras.Sequential([\n  # 声明图像格式为28*28，压平\n  keras.layers.Flatten(input_shape=(28, 28)),\n  # 第一Dense层，128个神经元\n  keras.layers.Dense(128, activation='relu'),\n  # 最终层\n  keras.layers.Dense(10)\n])\n\n# 编译模型，优化器，损失函数，指标\nmodel.compile(optimizer='adam',\n              loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\n# 训练模型 10次\nmodel.fit(train_images, train_labels, epochs=10)\n\n# 评估准确率\ntest_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)\n\n# 进行预测 增加softmax层\nprobability_model = keras.Sequential([model,keras.layers.Softmax()])\npredictions = probability_model.predict(test_images)\n\nnp.argmax(predictions[0])\ntest_labels[0]\n\n# 预测图表\ndef plot_image(i, predictions_array, true_label, img):\n  predictions_array, true_label, img = predictions_array, true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n# 预测标签图表\ndef plot_value_array(i, predictions_array, true_label):\n  predictions_array, true_label = predictions_array, true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')\n\n# 单个预测\ni = 12\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()\n\n# 绘制预测表\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()\n\n# 使用模型\nimg = test_images[1]\n# 图片转为列表\nimg = (np.expand_dims(img,0))\n# 预测\npredictions_single = probability_model.predict(img)\n# 绘制图表\nplot_value_array(1, predictions_single[0], test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)\n\n# 预测值\nnp.argmax(predictions_single[0])\n```\n"}}]);