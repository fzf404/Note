(window.webpackJsonp=window.webpackJsonp||[]).push([[443],{1071:function(n,e){n.exports='\x3c!--\ntitle: 27-JS异步\nsort:\n--\x3e\n\n## 定时器\n\n> JavaScript 提供定时执行代码的功能。\n\n`setTimeout()`\n\n```js\n// 函数 延时时间\nvar timerId = setTimeout(func | code, delay, args);\n\nconsole.log(1);\nsetTimeout("console.log(2)", 1000);\nconsole.log(3);\n// 1\n// 3\n// 2\n```\n\n## 串行模式\n\n```js\nvar items = [1, 2, 3, 4, 5, 6];\nvar results = [];\n\nfunction async(arg, callback) {\n  console.log("参数为 " + arg + " , 1秒后返回结果");\n  setTimeout(function () {\n    callback(arg * 2);\n  }, 1000);\n}\n\nfunction final(value) {\n  console.log("完成: ", value);\n}\n\nfunction series(item) {\n  if (item) {\n    async(item, function (result) {\n      results.push(result);\n      return series(items.shift());\n    });\n  } else {\n    return final(results[results.length - 1]);\n  }\n}\n/*\n参数为 1 , 1秒后返回结果\n参数为 2 , 1秒后返回结果\n参数为 3 , 1秒后返回结果\n参数为 4 , 1秒后返回结果\n参数为 5 , 1秒后返回结果\n完成:  12\n*/\n```\n\n## 并行\n\n```js\n// for each 同时发起6个异步任务\nvar items = [1, 2, 3, 4, 5, 6];\nvar results = [];\n\nfunction async(arg, callback) {\n  console.log("参数为 " + arg + " , 1秒后返回结果");\n  setTimeout(function () {\n    callback(arg * 2);\n  }, 1000);\n}\n\nfunction final(value) {\n  console.log("完成: ", value);\n}\n\nitems.forEach(function (item) {\n  async(item, function (result) {\n    results.push(result);\n    if (results.length === items.length) {\n      final(results[results.length - 1]);\n    }\n  });\n});\n```\n\n## Promise\n\n> 为 JS 异步操作提供统一接口\n\n```js\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, "done");\n  });\n}\n\ntimeout(100);\n/*\nPromise {<pending>}\n__proto__: Promise\ncatch: ƒ catch()\nconstructor: ƒ Promise()\nfinally: ƒ finally()\nthen: ƒ then()\nSymbol(Symbol.toStringTag): "Promise"\n__proto__: Object\n\n[[PromiseState]]: "fulfilled"\n[[PromiseResult]]: "done"\n*/\n```\n\n### then\n\n> 接受两个回调函数，一个成功，一个失败\n\n```js\nvar p1 = new Promise(function (resolve, reject) {\n  resolve("成功");\n});\np1.then(console.log, console.error);\n// "成功"\n\nvar p2 = new Promise(function (resolve, reject) {\n  reject(new Error("失败"));\n});\np2.then(console.log, console.error);\n// Error: 失败\n```\n\n> 实例：图片加载\n\n```js\nvar preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n\npreloadImage(\n  "https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png"\n)\n  .then(function (e) {\n    document.body.append(e.target);\n  })\n  .then(function () {\n    console.log("加载成功");\n  });\n```\n'}}]);