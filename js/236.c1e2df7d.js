(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{864:function(n,e){n.exports='\x3c!--\ntitle: 02-Rust基础\nsort:\n--\x3e\n\n### 结构体\n\n```rust\nstruct User {\n    username: String,\n    email: String,\n    active: bool,\n}\n\nstruct Color(u8,u8,u8);\n\nfn build_user(username: String, email: String) {\n    let mut a_user = User {\n        username: username,\n        email: email,\n        active: false,\n    };\n    a_user.active = true;\n    // 基于实例的更新语法\n    User{\n      username: String::from("fzf404"),\n      ..a_user\n    };\n    // Tuple Struct\n    let white = Color(255,255,255);\n}\n```\n\n#### 定义方法\n\n```rust\n// 为结构体定义方法\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle{\n  fn area(&self) -> u32{\n    self.width * self.height\n  }\n  // 关联函数\n  fn square(size: u32) -> Rectangle {\n    Rectangle {\n      height: size,\n      width: size,\n    }\n  }\n}\n// 将关联函数用于构造器\nlet a_square = Rectangle::square(30);\nprintln!("{}",a_square.area())\n```\n\n### 枚举\n\n```rust\nenum IPAddr {\n    v4(u8, u8, u8, u8),\n    v6(String),\n}\nlet localv4 = IPAddr::v4(127, 0, 0, 1);\nlet localv6 = IPAddr::v6(String::from("::1"));\n\n// 为枚举定义方法\nimpl IPAddr{\n  fn call(&self) {}\n}\n```\n\n#### Option\n\n> 可选变量，两种状态，None 或 Some\n>\n> Rust 中没有 None 类型，使用 Option 创建。\n>\n> 这样当变量不为`Option<T>`类型时，一定不为空。\n\n```rust\nlet x: Option<i8> = None;\nlet y = Some(5);\n```\n\n### Match\n\n> 必须穷举所有可能性\n\n```rust\n// 枚举匹配\nenum UsState {\n    Alabama,\n    Alaska,\n}\nenum Coin {\n    Penny,\n    Nickel,\n    Quarter(UsState),\n}\n\nfn value_in_cent(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Quarter(state) => {\n            println!("Quarter {:?}", state);\n            25\n        }\n    }\n}\n\nfn main() {\n    let c = Coin::Quarter(UsState::Alabama);\n    println!("{}", value_in_cent(c));\n}\n\n// Option<T>匹配\nlet y = Some(5);\nmatch y {\n  // None => None,\n  Some(i) => Some(i + 1),\n  _ => None,    // 匹配全部\n};\n\n// if let\nif let Some(5) = y {\n  println!("5")\n}\n```\n\n### Vector\n\n```rust\n// 定义Vectro\nlet mut v = vec![1, 2, 3];\nv[2] = 4;   // 修改值\nv.push(4);  // 增加值\n// 可变引用\nlet first =  &mut v[0];\n*first = 2; // 修改值\nprintln!("The Fisrt Element is {:?}", v);\n```\n\n### HashMap\n\n```rust\nuse std::collections::HashMap;\n// 初始化一个HashMap\nlet mut color: HashMap<String, Vec<u8>> = HashMap::new();\n// 插入\ncolor.insert(String::from("Blue"), vec![0,0,255]);\n\n// 结构体\n#[derive(Debug)]\nstruct RGB {\n    r: u8,\n    g: u8,\n    b: u8,\n}\nlet names = vec![\n  String::from("Blue"),\n  String::from("Green"),\n  String::from("Red"),\n];\nlet rgbs = vec![RGB{r:0,g:0,b:255}, RGB{r:0,g:255,b:0}, RGB{r:255,g:0,b:0}];\n// 创建HashMap\nlet colors: HashMap<_, _> = names.iter().zip(rgbs.iter()).collect();\n// 遍历\nprintln!("{:#?}",colors);\nfor (key,value) in &colors {\n  println!("{}: {:#?}", key, value);\n}\n\n// 插入\nlet mut new_colors:HashMap<_, _> = HashMap::new();\nnew_colors.insert("white",RGB{r:0,g:0,b:0});\n// 创建空Map\nlet e = new_colors.entry("white");\n// 不存在value则插入\ne.or_insert(RGB{r:255,g:255,b:255});\nprintln!("{:#?}",new_colors)\n```\n'}}]);