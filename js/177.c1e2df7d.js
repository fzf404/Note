(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{805:function(n,l){n.exports="\x3c!--\ntitle: 02-显示信息\nsort:\n--\x3e\n\n## BIOS 中断\n\n### `INT 10`\n\n> [参考](https://blog.csdn.net/hua19880705/article/details/8125706)\n\n## 代码\n\n```assembly\nMBRseg equ 7c0h ; 启动扇区段地址\nOUTseg equ 800h ; 跳出启动扇区地址\n\njmp start\n\n; Message全局变量定义\nmsg_welcome:\n    db '---- Welcome To fzfOS ----','$'\nmsg_setp1:\n    db 'Setp 1: MBR','$'\nmsg_setp2:\n    db 'Setp 2: JMP OUT MBR','$'\nmsg_CSIP:\n    db 'CS:????-IP:????','$'\n\n\nstart:\n    ; 初始化数据段寄存器\n    mov ax, MBRseg\n    mov ds, ax\n    ; 设置字符串操作的源指针\n    call welcome\n    call newline\n    call newline\n    call InMBR\n    call showCSIP\n    call newline\n    call newline\n\n    jmp OUTseg:0\n\n    call msg_setp2\n    call showCSIP\n\n\n\nwelcome:\n    mov si, msg_welcome\n    call printStr\n    ret\n\n; 新的一行\nnewline:\n    mov ah, 0eh\n    mov al, 0dh\n    int 10H\n    mov al, 0ah\n    int 10h\n    ret\n\n; 在MBR中\nInMBR:\n    mov si, msg_setp1\n    call printStr\n    call newline\n    ret\n\nprintStr:\n    ; 将字符拷贝到al\n    mov al, [si]\n    ; 判断是否末尾\n    cmp al, '$'\n    je over\n    ; 设置10H中断的服务：在Teletype模式下显示字符\n    mov ah, 0eh\n    ; BIOS对显示器和屏幕所提供的服务程序\n    int 10h\n    ; 递增si的值\n    inc si\n    ; 递归\n    jmp printStr\n\nshowCSIP:\n    ; 将CS值放入ax\n    mov ax, CS\n\n    ; 高8位放入dl中, 解析后放入bx\n    mov dl, ah\n    call Hex2Bit\n\n    ; cs高4位移到dl\n    mov dl, bh\n    call ASCII\n    mov [msg_CSIP+3], dl\n\n    ; cs高-4位\n    mov dl, Bl\n    call ASCII\n    mov [msg_CSIP+4], dl\n\n    mov dl,al\n    call Hex2Bit\n    mov dl, bh\n    call ASCII\n    mov  [msg_CSIP+5], dl\n\n    mov dl, bl\n    call ASCII\n    mov  [msg_CSIP+6], dl\n\n    ; IP值\n    pop ax\n\n    ; 高8位放入dl中, 解析后放入bx\n    mov dl, ah\n    call Hex2Bit\n\n    ; cs高4位移到dl\n    mov dl, bh\n    call ASCII\n    mov [msg_CSIP+11], dl\n\n    ; cs高-4位\n    mov dl, Bl\n    call ASCII\n    mov [msg_CSIP+12], dl\n\n    mov dl,al\n    call Hex2Bit\n    mov dl, bh\n    call ASCII\n    mov  [msg_CSIP+13], dl\n\n    mov dl, bl\n    call ASCII\n    mov  [msg_CSIP+14], dl\n\n    ; 显示\n    mov si, msg_CSIP\n    call printStr\n    ret\n\nHex2Bit:\n    ; CS的高8位挪到dh\n    mov dh, dl\n    ; CS的高8位挪到bl\n    mov bl, dl\n    ; dh右移4位，只剩高4位CS值\n    SHR dh,1\n    SHR dh,1\n    SHR dh,1\n    SHR dh,1\n    ; CS高4位移到bh\n    mov bh, dh\n    ; CS低4位移到bl\n    and bl, 0fh\n    ; bx 0101 CS 1100\n    ret\n\nASCII:\n    cmp dl,9\n    ; 大于9则去LETTER\n    jg LETTER\n    ; 小于9直接+30h及为对应ASCII\n    add dl,30h\n    ret\n\nLETTER:\n    add dl,37H\n    ret\n\nover:\n    ret\n\ntimes 510-($-$$) db 0\ndb 0x55,0xaa\n```\n\n## 效果\n\n![image-20201228225714906](https://img-1257284600.cos.ap-beijing.myqcloud.com/2020/20201228225714.png)\n\n## 转载程序\n\n> CHS 寻址方法（现已弃用\n"}}]);