(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{678:function(n,t){n.exports="\x3c!--\ntitle: A1-YOLOv5\nsort:\n--\x3e\n\n# YOLOv5\n\n> [Github](https://github.com/ultralytics/yolov5)\n>\n> [模型](https://github.com/ultralytics/yolov5/releases)\n\n## Run\n\n```powershell\n# clone代码\ngit clone https://github.com/ultralytics/yolov5.git\n\n# 依赖问题\npip install pycocotools-Windows\n# 安装cuda\nconda install cudatoolkit=11.1 -c conda-forge\n\n# 摄像头\npython detect.py --source 0 --device 0 --weights <model>\n\n# 视频\npython detect.py --source origin.mp4 --weights weights/yolov5x.pt --output.mp4\n```\n\n## 训练自己的模型\n\n> coco128 数据集\n\n```python\n# 使用colib进行训练\nimport os\nos.chdir('./yolov5')\n\n!pip install -r requirements.txt\n\n!python train.py \\\n  --img 320 \\\t\t\t# 图像大小\n  --batch 16 \\\t\t# 组大小\n  --epochs 100 \\\t# 次数\n  --data /content/DataSet/fire/data.yaml \\\t# 训练数据\n  --cfg models/yolov5s.yaml\t\t# 预训练模型\n\n# 运行模型\npython detect.py --weights .\\best.pt --source <img/video/camera>\n```\n\n### 参数详解\n\n- ##### Precision & Recall\n\n  > 准确率与召回率\n\n- ###### mAP\n\n  > 平均精准度\n"}}]);