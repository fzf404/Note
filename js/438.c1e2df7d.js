(window.webpackJsonp=window.webpackJsonp||[]).push([[438],{1066:function(n,e){n.exports='\x3c!--\ntitle: 22-常用工具\nsort:\n--\x3e\n\n## Base64\n\n```js\n// 字符串转Base64\nbtoa("Hello World");\n("SGVsbG8gV29ybGQ=");\n// Base64转字符串\natob("SGVsbG8gV29ybGQ=");\n("Hello World");\n\n// 中文转义后Base64\nbtoa(encodeURIComponent("你好"));\n("JUU0JUJEJUEwJUU1JUE1JUJE");\ndecodeURIComponent(atob("JUU0JUJEJUEwJUU1JUE1JUJE"));\n("你好");\n```\n\n## 转换\n\n```js\n// 对象转字符串\nJSON.stringify(obj);\n// 字符串转对象\nJSON.parse(str);\n// 深拷贝\nJSON.parse(JSON.stringify(obj));\n\n// 字符串转数字\nparseInt(str);\nparseFloat(str);\n// 数字转字符串\nstr.toString();\n\n// 替换\nstr.replace(",", "");\n// 批量替换\nstr.replaceAll();\n\n// 切片\nstr.slice(0, 4);\n\n// 排序\nitemList.sort((a, b) => {\n  a.id - b.id;\n});\n```\n\n## 数组操作\n\n```js\n// 对源数组进行操作\npeople.forEach(function (dude) {\n  dude.pickUpSoap();\n});\n\n// 返回新数组\nvar wallets = people.map(function (dude) {\n  return dude.wallet;\n});\n\n// 筛选\nvar fatWallets = wallets.filter(function (wallet) {\n  return wallet.money > 100;\n});\n```\n\n## 字符串\n\n| 方法                | 描述                                                                                     |\n| :------------------ | :--------------------------------------------------------------------------------------- |\n| charAt()            | 返回指定索引位置的字符                                                                   |\n| charCodeAt()        | 返回指定索引位置字符的 Unicode 值                                                        |\n| concat()            | 连接两个或多个字符串，返回连接后的字符串                                                 |\n| fromCharCode()      | 将 Unicode 转换为字符串                                                                  |\n| indexOf()           | 返回字符串中检索指定字符第一次出现的位置                                                 |\n| lastIndexOf()       | 返回字符串中检索指定字符最后一次出现的位置                                               |\n| localeCompare()     | 用本地特定的顺序来比较两个字符串                                                         |\n| match()             | 找到一个或多个正则表达式的匹配                                                           |\n| replace()           | 替换与正则表达式匹配的子串                                                               |\n| search()            | 检索与正则表达式相匹配的值                                                               |\n| slice()             | 提取字符串的片断，并在新的字符串中返回被提取的部分                                       |\n| split()             | 把字符串分割为子字符串数组                                                               |\n| substr()            | 从起始索引号提取字符串中指定数目的字符                                                   |\n| substring()         | 提取字符串中两个指定的索引号之间的字符                                                   |\n| toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射 |\n| toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射 |\n| toLowerCase()       | 把字符串转换为小写                                                                       |\n| toString()          | 返回字符串对象值                                                                         |\n| toUpperCase()       | 把字符串转换为大写                                                                       |\n| trim()              | 移除字符串首尾空白                                                                       |\n| valueOf()           | 返回某个字符串对象的原始值                                                               |\n\n### 例子\n\n```js\nlet x = "JohnJohn"; // x 是字符串\ny = x.charAt(2); // h\ny = x.charCodeAt(2); // 104\ny = x.concat(y, y); // JohnJohn104104, x+y+y\ny = x.indexOf("h"); // 2, 索引从0开始\ny = x.lastIndexOf("h"); // 6\ny = x.slice();\ny = x.split("o"); //J,hnJ,hn\ny = x.substr(2); // hnJohn\ny = x.substring(2, 4); // hn，[2,3]\ny = x.toLocaleLowerCase(); // johnjohn,小写\ny = x.toLocaleUpperCase(); // JOHNJOHN,大写\ny = x.toString(); // 转成Stirng\ny = x.toUpperCase(); // JOHNJOHN,大写\ny = x.trim(); // JohnJohn,去除两端的空格\ny = x.valueOf(); // 返回某个字符串对象的原始值\n```\n\n##\n'}}]);