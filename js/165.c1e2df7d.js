(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{793:function(t,n){t.exports='\x3c!--\ntitle: 07-CubeMX串口通信\nsort:\n--\x3e\n\n## 配置\n\n1. 设置高速外部时钟源`System Core -> RCC -> HSE -> Crystal/Ceramic Resonat`\n\n2. 设置串口`Connectivity -> HSART1 -> Asynchrono`, 并开启中断\n\n   ![image-20210323110647598](https://img-1257284600.cos.ap-beijing.myqcloud.com/2021/image-20210323110647598.png)\n\n## 代码\n\n### 发送数据\n\n```c\nuint8_t loopMessage[]="fzf404 Test!\\n";\nwhile (1)\n{\n\tHAL_UART_Transmit_IT(&huart1, (uint8_t *)loopMessage, sizeof(loopMessage));\n\tHAL_Delay(1000);\n}\n```\n\n### 读取数据\n\n```c\n#include <string.h>\n\n#define RXBUFFERSIZE  256     // 最大接收字节数\nchar RxBuffer[RXBUFFERSIZE];\t// 接收数据\nuint8_t aRxBuffer;\t\t\t\t\t\t// 接收中断缓冲\nuint8_t Uart1_Rx_Cnt = 0;\t\t\t// 接收缓冲计数\n\nint main(void)\n{\n  // 中断处理函数\n  HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);\n}\n\n// 串口中断回调\nvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)\n{\n  // 保护\n  UNUSED(huart);\n  // 溢出判断\n\tif(Uart1_Rx_Cnt >= 255)\n\t\t{\n\t\t\tUart1_Rx_Cnt = 0;\n\t\t\tmemset(RxBuffer,0x00,sizeof(RxBuffer));\n\t\t\tHAL_UART_Transmit(&huart1, (uint8_t *)"数据溢出", 10, 0xFFFF);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tRxBuffer[Uart1_Rx_Cnt++] = aRxBuffer;\t\t// 接收数据转存\n\t\t\t// 判断结束位\n\t\t\tif((RxBuffer[Uart1_Rx_Cnt-1] == 0x0A)&&(RxBuffer[Uart1_Rx_Cnt-2] == 0x0D))\n\t\t\t{\n        // 将收到的信息发送出去\n\t\t\t\tHAL_UART_Transmit(&huart1, (uint8_t *)&RxBuffer, Uart1_Rx_Cnt, 0xFFFF);\n\t\t\t\tUart1_Rx_Cnt = 0;\n        // 清空数组\n\t\t\t\tmemset(RxBuffer,0x00,sizeof(RxBuffer));\n\t\t\t}\n\t\t}\n\t\t// 开启接收中断\n\t\tHAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);\n\n}\n```\n\n### HAL 库\n\n> UAER(通用异步收发器)\n\n```c\n// 串口发送数据\n// 串口发送指定长度的数据。如果超时没发送完成，则不再发送，返回超时标志（HAL_TIMEOUT）。\nHAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)\n\n\n// 串口接收数据\n// 接收器初始化，接收到指定长度数据，关闭中断，进入回调函数\nHAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)\n\nHAL_UART_Transmit_IT();\t// 串口中断模式发送  \nHAL_UART_Receive_IT();\t// 串口中断模式接收\nHAL_UART_Transmit_DMA();// 串口DMA模式发送\nHAL_UART_Transmit_DMA();// 串口DMA模式接收\n\n// 串口中断函数\nHAL_UART_IRQHandler(UART_HandleTypeDef *huart);  \t\t\t// 串口中断处理函数\nHAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);  \t// 串口发送中断回调函数\nHAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);  \t// 串口接收中断回调函数\nHAL_UART_ErrorCallback();\t\t// 串口接收错误函数\n```\n'}}]);