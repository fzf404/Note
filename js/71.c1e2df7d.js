(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{699:function(n,t){n.exports="\x3c!--\ntitle: 04-React事件处理\nsort:\n--\x3e\n\n## 事件处理\n\n```react\nupdateTime = () => {\n    this.setState({\n        time: new Date().toTimeString()\n    })\n}\n\n// 其他方法\nupdateTime() {\n    this.setState({\n        time: new Date().toTimeString()\n    })\n}\n\n// 在构造函数中绑定this指针\nthis.updateTime = this.updateTime.bind(this)\n// 渲染render函数中传入this指针\n<button onClick={() => this.updateTime()}>Update</button>\n<button onClick={this.updateTime.bind(this)}>Update</button>\n```\n\n## 条件处理\n\n```react\n// 获取button组件\nfunction Login() {\n  return <button>Login</button>\n}\nfunction Logout() {\n  return <button>Logout</button>\n}\n// 组件类\nclass App extends React.Component {\n  state = {\n    isLogin: false\n  }\n\tupdateLog = () => {\n    \tconsole.log(this)\n    \tthis.setState({\n        \tisLogin: true\n    \t})\n\t}\n  render() {\n    const isLogin = this.state.isLogin;\n    let button;\n    if (isLogin) {\n      button = <Login />\n    } else {\n      button = <Logout />\n    }\n    // 三元运算符  {isLogin?<Login/>:<Logout/>}\n    return <div>\n      <h1>Hello,{this.props.name}</h1>\n      {button}\n      <button onClick={this.updateLog}>Update</button>\n    </div>\n  }\n}\n```\n\n### 解构\n\n```react\nrender() {\n    const {isLogin} = this.state;\n    let button;\n    return <div>\n        <h1>Hello,{this.props.name}</h1>\n        {isLogin?<Login/>:<Logout/>}\n        <button onClick={this.updateLog}>Update Status</button>\n    </div>\n}\n\n```\n\n### 子组件触发父组件\n\n```react\nfunction Login(props) {\n    return <button onClick={props.updateLog}>Login</button>\n}\nfunction Logout(props) {\n    return <button onClick={props.updateLog}>Logout</button>\n}\nclass App extends React.Component {\n    state = {\n        isLogin: false\n    }\n    updateLog = () => {\n        console.log(this)\n        this.setState({\n            isLogin: !this.state.isLogin\n        })\n\t}\n    render() {\n        const isLogin = this.state.isLogin;\n        let button;\n        // 向子组件传入props\n        return <div>\n            <h1>Hello,{this.props.name}</h1>\n            {isLogin?<Login updateLog={this.updateLog}/>:<Logout updateLog={this.updateLog}/>}\n        </div>\n    }\n}\nReactDOM.render(\n    <App name=\"admin\" />\n    , document.getElementById('app')\n)\n```\n\n## 列表渲染\n\n```react\nclass List extends React.Component {\n    state = {\n        list:[1,2,3,4,5]\n    }\n\n    render() {\n        const arr = this.state.list;\n        const listItem = []\n        // 处理list\n        arr.map((item)=>{\n            let li = <li>{item}</li>\n            listItem.push(li)\n        })\n        return <div>\n            <ul>\n                {listItem}\n            </ul>\n        </div>\n    }\n}\nReactDOM.render(\n    <List/>\n    , document.getElementById('app')\n)\n```\n\n### kw 列表渲染\n\n```react\nstate = {\n    list:[\n        {id:1,text:'JS'},\n        {id:2,text:'Python'},\n        {id:3,text:'Golang'},\n        {id:4,text:'C#'}\n    ]\n}\n\nrender() {\n    const arr = this.state.list;\n    const listItem = []\n    // 使用for循环\n    for(var i=0;i<arr.length;i++){\n        // 缓存不变的key提高效率\n        let li = <li key={arr[i].id}>{arr[i].text}</li>\n            listItem.push(li)\n    }\n    return <div>\n        <ul>\n            {listItem}\n        </ul>\n    </div>\n}\n```\n\n## 表单应用\n\n![image-20201206140905850](https://img-1257284600.cos.ap-beijing.myqcloud.com/2020/20201206140912.png)\n\n```react\nstate = {\n    val: '',\n    list: []\n}\n// Input标签改动后,自动触发event添加至State.value\nhandleInput = (event) => {\n    this.setState({\n        val: event.target.value\n    })\n}\n// 更新list\nhandleAdd = () => {\n    // 解构，把state的值赋给val和list\n    const { val, list } = this.state;\n    list.push(val);\n    this.setState({\n        // 语法糖，简写list:list\n        list\n    })\n}\nrender() {\n    const val = this.state.val;\n    const arr = this.state.list;\n    const listItem = []\n    arr.map((item,index) => {\n        // 添加索引key\n        let li = <li key = {index}>{item}</li>\n        listItem.push(li)\n    })\n    return <div>\n        <div>\n            <input type=\"text\" value={val} onChange={this.handleInput}></input>\n            <button onClick={this.handleAdd}>Insert</button>\n        </div>\n        <ul>\n            {listItem}\n        </ul>\n    </div>\n}\n```\n"}}]);