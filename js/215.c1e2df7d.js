(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{843:function(n,t){n.exports='\x3c!--\ntitle: 04-标准库\nsort:\n--\x3e\n\n## Flag\n\n> 获取命令行参数\n\n```go\nvar addr = flag.String("addr", ":8080", "http service address")\n\nfunc main() {\n  // 解码\n\tflag.Parse()\n  // h\n\terr := http.ListenAndServe(*addr, nil)\n}\n```\n\n## Log\n\n```go\n// 种类\nlog.Print("基础的日志")\nlog.Println("换行的日志")\nlog.Printf("%s的日志", "f")\n\n// 日志文件\nfileName := "debug.log"\n// 创建文件\nlogFile,err  := os.Create(fileName)\ndefer logFile.Close()\nif err != nil {\n  log.Fatalln("Error: open log file!")\n}\n// 文件句柄，日志前缀，配置日志模式\ndebugLog := log.New(logFile,"",log.Lshortfile)\n\n// Log分类\ndebugLog.Print("打印日志并继续执行")\ndebugLog.Fatal("打印日志并终止执行")\ndebugLog.Panic("打印日志并停止执行")\n```\n\n## Time\n\n```go\n// 延时1500ms\ntime.After(time.Duration(1) * time.Second + time.Duration(1) * time.Millisecond * 500)\n```\n\n## Reflect\n\n> 在程序运行期获取类型的反射信息，并且有能力修改它们。\n\n```go\ntype Dog struct {\n\tName string\n\tAge  int\n}\n\nfunc (dog *Dog) Eat() {\n\tfmt.Printf("%s is eating.", dog.Name)\n}\n\nfunc (dog Dog) Sleep() {\n\tfmt.Printf("%s is sleeping.", dog.Name)\n}\n\naDog := Dog{"Wangcai", 4}\naDogPtr := &Dog{"Wangcai", 4}\n\n// 获取类型\ntDog := reflect.TypeOf(aDog)\nfmt.Println(tDog.Name())  // Dog\nfmt.Println(tDog.Kind())  // struct\n\ntDogPtr := reflect.TypeOf(aDogPtr).Elem()   // 获取指针指向的实际变量\nfmt.Println(tDogPtr.Name())  // Dog\nfmt.Println(tDogPtr.Kind())  // struct\n\n// 遍历结构体方法\nfor i := 0; i < tDog.NumMethod(); i++ {\nm := tDog.Method(i)\nfmt.Printf("%s: %v\\n", m.Name, m.Type)\n}\n// Sleep: func(main.Dog)\n\ntDogPtr = reflect.TypeOf(aDogPtr)\nfor i := 0; i < tDogPtr.NumMethod(); i++ {\nm := tDogPtr.Method(i)\nfmt.Printf("%s: %v\\n", m.Name, m.Type)\n}\n// Eat: func(*main.Dog)\n// Sleep: func(*main.Dog)\n\n// 获取值\nvDog := reflect.ValueOf(aDog)\nvDogPtr := reflect.Indirect(reflect.ValueOf(aDogPtr))\t// Kind 非Interface/Ptr 则原值\nvDogPtr := reflect.ValueOf(aDogPtr).Elem()\t// 非Interface/Ptr 则panic\nfmt.Println(vDog)   // {Wangcai 4}\nfmt.Println(vDog.Type())    // main.Dog\n\n// 遍历结构体字段\nfor i := 0; i < vDog.NumField(); i++ {\n  // 遍历字段\n\tfield := vDog.Type().Field(i)\n\tvalue := vDog.Field(i).Interface()\n\tfmt.Printf("%s: %v = %v\\n", field.Name, field.Type, value)\n}\n\nfor i := 0; i < vDogPtr.NumField(); i++ {\n  // 遍历字段\n\tfield := vDogPtr.Type().Field(i)\n\tvalue := vDogPtr.Field(i).Interface()\n\tfmt.Printf("%s: %v = %v\\n", field.Name, field.Type, value)\n}\n// Name: string = Wangcai\n// Age: int = 4\n```\n\n### 修改值\n\n```go\naDog := Dog{"Wangcai", 4}\naDogPtr := &Dog{"Wangcai", 4}\n\nvDog := reflect.ValueOf(aDog)\nfmt.Println(vDog.CanSet())      // false\n\nvDogPtr := reflect.ValueOf(aDogPtr).Elem()\nfmt.Println(vDogPtr.CanSet())   // true\n\nvName := vDogPtr.FieldByName("Name")\nvAge := vDogPtr.FieldByName("Age")\nvName.SetString("Laifu")\t// 修改值\nagePtr := vAge.Addr().Interface().(*int)\t// 获得指针\n*agePtr = 5\t\t// 通过指针修改值\n\n\nfmt.Print(*aDogPtr)\t// {Laifu 5}\nfmt.Print(aDogPtr)\t// &{Laifu 5}\n```\n'}}]);