(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{958:function(n,t){n.exports="\x3c!--\ntitle: 06-判断语句与汇编\nsort:\n--\x3e\n\n# 条件判断与汇编\n\n## if 语句\n\n- 源码\n\n```c\nvoid test(int i)\n{\n\tif (i <= 1)\n\t{\n\t\ti = i + 1;\n\t}\n}\n```\n\n- 汇编\n\n```assembly\n00401038   cmp         dword ptr [ebp+8],1\n0040103C   jg          test+27h (00401047)\t\t; 大于则跳转到函数结尾\n0040103E   mov         eax,dword ptr [ebp+8]\n00401041   add         eax,1\n00401044   mov         dword ptr [ebp+8],eax\n00401047   pop         edi\n00401048   pop         esi\n...\n```\n\n## &&运算\n\n- 源码\n\n  ```c\n  void test(int i, int j)\n  {\n  \tif (i <= 1 && j>= 1 && i+j < 2)\n  \t{\n  \t\ti = i + 1;\n  \t}\n  }\n  ```\n\n- 汇编\n\n  ```assembly\n  004010A8   cmp         dword ptr [ebp+8],1\t\t; 不断判断至全部不满足则执行\n  004010AC   jg          test+38h (004010c8)\t\t; 大于则结束\n  004010AE   cmp         dword ptr [ebp+0Ch],1\t; 小于则结束\n  004010B2   jl          test+38h (004010c8)\n  004010B4   mov         eax,dword ptr [ebp+8]\n  004010B7   add         eax,dword ptr [ebp+0Ch]\n  004010BA   cmp         eax,2\n  004010BD   jge         test+38h (004010c8)\t\t; \t大于等于则接数\n  004010BF   mov         eax,dword ptr [ebp+8]\n  004010C2   add         eax,1\n  004010C5   mov         dword ptr [ebp+8],eax\n  004010C8   pop         edi\n  004010C9   pop         esi\n  ...\n  ```\n\n## `Switch`\n\n> 三个以上数据时使用。\n>\n> 为数据建立地址表\n>\n> 有空缺则建立小表\n>\n> 当 case 中常量表达式为不连续的值，则使用二分法查找\n\n# 杂知识\n\n## 头文件\n\n> 防止重复包含\n\n```c\n# ifndef demo.h\n# define demo.h\n\nFunction();\n\n# endif\n```\n\n## 分配内存\n\n> `void *malloc(size_t size);`\n>\n> 分配堆中的内存\n\n```c\nint * ptr;\n// 在堆中申请内存\nptr = (int *)malloc(sizeof(int)*128);\nif(ptr == NULL)\n    return 0;\n// 初始化分配的空间，全变成0\nmemset(ptr,0,sizeof(int)*128);\n// 使用\n*(ptr)+4 = 404;\n// 释放堆空间\nfree(ptr);\n// 释放指针\nptr = NULL;\n```\n\n## 文件读写\n\n```c\n\n```\n"}}]);