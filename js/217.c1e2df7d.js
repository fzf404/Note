(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{845:function(t,n){t.exports='\x3c!--\ntitle: 06-WebSocket\nsort:\n--\x3e\n\n## HelloWorld\n\n- server\n\n```go\npackage main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n\n\t"github.com/gorilla/websocket"\n)\n\nvar upgrader = websocket.Upgrader{}\n\nfunc socketHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Print("Error during connetion upgradation", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println("Error during message reading", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf("Received: %s", message)\n\t\terr = conn.WriteMessage(messageType, message)\n\t\tif err != nil {\n\t\t\tlog.Println("Error during message writing", err)\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc home(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "IndexPage")\n}\n\nfunc main() {\n\thttp.HandleFunc("/", home)\n\thttp.HandleFunc("/socket", socketHandler)\n\tlog.Println("Server Listen in 127.0.0.1:8080")\n\tlog.Fatal(http.ListenAndServe(("localhost:8080"), nil))\n}\n```\n\n- client\n\n```go\npackage main\n\nimport (\n\t"log"\n\t"os"\n\t"os/signal"\n\t"time"\n\n\t"github.com/gorilla/websocket"\n)\n\nvar done chan interface{}\nvar interrupt chan os.Signal\n\n// 接收处理\nfunc receiveHandler(connection *websocket.Conn) {\n\tdefer close(done)\n\tfor {\n\t\t_, msg, err := connection.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println("Error in receive:", err)\n\t\t\treturn\n\t\t}\n\t\tlog.Printf("Received: %s\\n", msg)\n\t}\n}\n\nfunc main() {\n\tdone = make(chan interface{})    // 指示接收断开\n\tinterrupt = make(chan os.Signal) // 指示系统中断\n\n\tsignal.Notify(interrupt, os.Interrupt) // 注意Ctrl+C\n\n\t// 连接\n\tsocketUrl := "ws://localhost:8080" + "/socket"\n\tconn, _, err := websocket.DefaultDialer.Dial(socketUrl, nil)\n\tif err != nil {\n\t\tlog.Fatal("Error connecting to Websocket Server:", err)\n\t}\n\tdefer conn.Close()\n\t// 新线程中运行接收\n\tgo receiveHandler(conn)\n\n\tfor {\n\t\tselect {\n\t\tcase <-time.After(time.Duration(1)*time.Second + time.Duration(1)*time.Millisecond*500):\n\t\t\t// 1s发送给一次信息 持续时间，毫秒，1000\n\t\t\terr := conn.WriteMessage(websocket.TextMessage, []byte("Hello from GolangDocs!"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println("Error during writing to websocket:", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\tcase <-interrupt:\n\t\t\t// 中断\n\t\t\tlog.Println("Received SIGINT interrupt signal. Closing all pending connections")\n\n\t\t\t// 关闭连接\n\t\t\terr := conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println("Error during closing websocket:", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\t// 断开连接成功\n\t\t\t\tlog.Println("Receiver Channel Closed! Exiting....")\n\t\t\tcase <-time.After(time.Duration(1) * time.Second):\n\t\t\t\t// 断开超时\n\t\t\t\tlog.Println("Timeout in closing receiving channel. Exiting....")\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}\n\n```\n'}}]);