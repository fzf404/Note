(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{645:function(n,t){n.exports='\x3c!--\ntitle: 10-Shell编程\nsort:\n--\x3e\n\n## 实用\n\n```bash\n# 判断命令是否存在\ntype tmux > /dev/null 2>&1 || { echo \'安装tmux中...\' ; apt install tmux -y }\n\n# 变量展开\necho 1+1=$((1+1))\necho Number_{0..9}{Z..A}\necho $(ls)\necho $HOME\n# SomeText /home/fzf 2\necho "SomeText $(pwd) $((1+1))"\n# SomeText $(pwd) $((1+1))\necho \'SomeText $(pwd) $((1+1))\'\n\n# 调试\n# 打印命令展开 失败立即退出 拒绝使用未定义变量 管道命令失败\nset -xeuo pipefail\n\n# 退出时杀掉所有子进程\ntrap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT\n\n# 超时停止运行\ntimeout 10s bash demo.sh\n```\n\n## 变量\n\n```bash\n#!/bin/bash\n\n# 变量\nname="value"\t\t# 定义变量\necho $name\t\t\t# 变量取值\nunset name\t\t\t# 删除变量\nreadonly name\t\t# 变量设置为只读\n\nvarls=`ls`\t\t\t# 命令返回值赋值\nvarls=$(ls)\n\n# 字符串\nstr=\'this is a string\'\n# 双引号内部可有变量\nstr="You are \\"$name\\"! \\n"\nlen = ${#str}\t\t# 字符串长度\nstr = ${str:4}\t# 第四个到结束\nstr = ${str:1:4}\t\t# 第1个字符开始取4个\nstr = ${str:0-3:4}\t# 右边第3个字符串开始取4个\n\n# 读取\nread -p "Input Num=" NUM1\necho "Your Num：$NUM1"\n# 等待10s\nread -t 10 -p "Input Num=" NUM1\n# 数组\narray=(value0 value1 value2 value3)\n$(array[index])\t\t\t# 取值\n$(array[@])\t\t\t\t\t# 全部\n\n# 运算\n$(( (2+3)*4 ))\n$[(2+3)*4]\n```\n\n### 参数\n\n```bash\n$num\t\t# $0 命令本身 $1- 全部参数\n$*\t\t\t# 所有参数\n$@\t\t\t# 所有参数-列表\n$#\t\t\t# 参数个数\n\n$$\t\t\t# 当前进程号\n```\n\n### 常用语法\n\n```bash\n2>&1\t\t# 标准错误重定向到标准输出\n&&\t\t\t# 前一个命令执行成功则执行后一个\n||\t\t\t# 前一个命令执行失败则执行后一个\n```\n\n## 条件判断\n\n```bash\nif [ 条件判断式 ]\nthen\n    程序\nelif [ 条件判断式 ]\nthen\n    程序\nfi\n\n# 常用判断条件\nif [ \'test\' = \'test\' ] \t\t# 等于\nif [ 20 -gt 10] \t\t\t\t\t# 大于\nif [ -e /root/nohup.out ] # 文件是否存在\n\nif [ \'test\' = \'test\' ] && echo \'equal\' || echo \'!\'\n```\n\n### case\n\n```bash\ncase $1 in\n"1")\necho 周一\n;;\n"2")\necho 周二\n;;\n*)\necho 其它\n;;\nesac\n```\n\n### for\n\n```bash\nfor var in val1 val2 val3...\ndo\n\techo var\ndone\n\n# 其他语法\nfor ((i=0;i<=100;i++))\ndo\n\techo $i\ndone\n\n# while\nwhile [ $i -le 100 ]\ndo\n    SUM=$[$SUM+$i]\n    i=$[$i+1]\ndone\n```\n\n## 函数\n\n```bash\nfunction getSum(){\n    SUM=$[$n1+$n2]\n    echo "sum=$SUM"\n}\nread -p "Input n1: " n1\nread -p "Input n2: " n2\n\n# 调用 getSum 函数\ngetSum $n1 $n2\n```\n'}}]);