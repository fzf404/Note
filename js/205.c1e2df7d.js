(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{833:function(n,t){n.exports='\x3c!--\ntitle: 06-字符串与IO\nsort:\n--\x3e\n\n# 字符串与 IO\n\n## 字符串\n\n`const char first[] = "Hello World";`\n\n> 多出的空间会被`/0`填充\n>\n> 使用指针：\n> `const char *pc = "hi~";`\n\n```c\nchar str[][10]={\n    "Hello",\n    "World",\n    "asdffshesagdsaf"\t// 报错\n};\nchar * str[]={\n    "Hello",\n    "World",\n    "asdffshesagdsaf"\t// 正常\n};\n```\n\n### `gets()`\n\n> 不推荐使用\n>\n> `get(); put();`\n\n- `fget(name, len, stdin);`\n- `fput(name, stdout);`\n- `gets_s(name, len);`\n\n  > 会丢弃换行符\n\n### `puts()`\n\n> puts() 自动添加换行符，遇到空字符停止输出。\n\n- `fputs()`\n\n  > 需要指明写入数据的文件（控制台则为`stdout`）\n\n### 字符串操作\n\n- `strlen(str)`\n\n  > 统计字符串长度。\n\n- `stract(str1, str2)`\n\n  > 拼接两个字符串并覆盖第一个\n\n- `strncat(str1, str2, max_len)`\n\n  > 同上，第三个参数为最大长度\n\n- `strcmp(str1, str2)`\n\n  > 比较两个参数是否相等\n  >\n  > 相同返回 0，不同返回相差的 ASCII 值\n\n- `strncmp(str1, str2, num)`\n\n  > 功能同上，第三个参数为比较字符个数。\n\n- `strcpy()/strncp`\n\n  > 直接赋值拷贝的是指向字符串的指针。\n  >\n  > (目标字符串[不必是字符串的开始]，源字符串，最大拷贝个数)\n  >\n  > 函数返回第一个参数的地址\n\n- `sprintf(str,"str%d",str/num)`\n\n  > 基本用法与 printf()相似，第一个参数为目标 str\n\n  ```c\n  int a = 404;\n  char str[40];\n  sprintf(str,"test%d",a);\n  printf("%s",str);\n  // test404\n  ```\n'}}]);