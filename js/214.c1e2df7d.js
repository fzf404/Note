(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{842:function(n,t){n.exports='\x3c!--\ntitle: 03-Gin实战\nsort:\n--\x3e\n\n> 使用 Gin 框架开发\n\n```bash\n# 环境准备\nmkdir goLearn\ncd goLearn\n# 使用mod管理依赖\ngo mod init goLearn\n# 安装gin框架\ngo get -u github.com/gin-gonic/gin\n```\n\n## Gin\n\n> [HelloWorld](http://localhost:8080/ping)\n\n```go\npackage main\n\nimport "github.com/gin-gonic/gin"\n\nfunc main() {\n    // 初始化Gin框架，创建实例r\n\tr := gin.Default()\n    // 绑定子页, 提供响应函数\n\tr.GET("/ping", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t"message": "pong",\n\t\t})\n\t})\n    // 异常处理\n    panic(r.Run())\n}\n```\n\n## 用户注册\n\n> 使用`gorm`连接数据库\n>\n> ==踩坑==：`gorm2`不兼容此写法\n\n```go\npackage main\n\nimport (\n\t"fmt"\n\t"log"\n\t"math/rand"\n"time"\n\n\t"github.com/gin-gonic/gin"\n\t"github.com/jinzhu/gorm"\n\t_ "github.com/go-sql-driver/mysql"\n)\n\n// Table的结构\ntype User struct {\n\tgorm.Model\n\tName     string `gorm:"type:varchar(20);not null`\n\tSex      bool    `gorm:"type:bool;not null"`\n\tPassword string `gorm:"size:255;not null`\n}\n\nfunc main() {\n\n\t// 初始化数据库\n\tdb := InitDB()\n\t// 延迟关闭\n\tdefer db.Close()\n\n\t// gin初始化\n\tr := gin.Default()\n\t// 监听 处理函数得到一个gin.Context指针{上下文}\n\tr.POST("/api/register", func(ctx *gin.Context) {\n\t\t// Get data\n\t\tname := ctx.PostForm("name")\n\t\tsex := ctx.PostForm("sex")\n\t\tpasswd := ctx.PostForm("passwd")\n\t\tsex_num := true\n\t\t// Confirm data\n\t\tif sex == "1" {\n\t\t\tsex_num = true\n\t\t} else if sex == "0" {\n\t\t\tsex_num = false\n\t\t} else {\n\t\t\t// gin.H()生成map对象\n\t\t\tctx.JSON(422, gin.H{\n\t\t\t\t// 另外一种写法\n\t\t\t\t// http.StatusUnprocessableEntity, map[string]interface{}{"code"...}\n\t\t\t\t"code": 422, "msg": "你是外星人吗？",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tif len(passwd) < 6 {\n\t\t\tctx.JSON(422, gin.H{\n\t\t\t\t"code": 422, "msg": "密码太短了！",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tif len(name) == 0 {\n\t\t\t// 随机用户名\n\t\t\tname = RandomString(10)\n\t\t}\n\n\t\tif isNameExist(db, name) {\n\t\t\tctx.JSON(422, gin.H{\n\t\t\t\t"code": 422, "msg": "用户名已存在",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tnewUser := User{\n\t\t\tName:     name,\n\t\t\tSex:      sex_num,\n\t\t\tPassword: passwd,\n\t\t}\n\t\t// 创建用户\n\t\tdb.Create(&newUser)\n\t\t// 调试打印信息\n\t\tlog.Println(name, sex, passwd)\n\t\tctx.JSON(200, gin.H{\n\t\t\t"code": 200, "msg": "注册成功",\n\t\t})\n\n\t})\n\tpanic(r.Run())\n}\n// 判断用户是否存在 传入db指针 用户名 返回bool值\nfunc isNameExist(db *gorm.DB, name string) bool {\n\t// 创建结构体\n\tvar user User\n\t// 使用where name=<input_name>判断 user结构体解析数据\n\tdb.Where("name = ?", name).First(&user)\n\tif user.ID != 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n// 生成随机数 从letters中随机\nfunc RandomString(n int) string {\n\n\tletters := []byte("asdfghjklzxcvbnmqwertyuiopASDFGHJKLZXCVBNMQWERTYUIOP")\n\tresult := make([]byte, n)\n\n\trand.Seed(time.Now().Unix())\n\n\tfor i := range result {\n\t\tresult[i] = letters[rand.Intn(len(letters))]\n\t}\n\treturn string(result)\n}\n\n// 连接\nfunc InitDB() *gorm.DB {\n\tdriverName := "mysql"\n\thost := "localhost"\n\tport := "3306"\n\tusername := "root"\n\tpassword := "1234"\n    // 建立此数据库\n\tdatabase := "fzf404"\n\tcharset := "utf8"\n\t// 连接信息格式化\n\targs := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=%s&parseTime=true",\n\t\tusername,\n\t\tpassword,\n\t\thost,\n\t\tport,\n\t\tdatabase,\n\t\tcharset,\n\t)\n\tprintln(args)\n\t// 打开连接\n\tdb, err := gorm.Open(driverName, args)\n\t// 错误处理\n\tif err != nil {\n\t\tpanic("failed to connect databas. err:" + err.Error())\n\t}\n\t// Auto创建表\n\tdb.AutoMigrate(&User{})\n\n\treturn db\n}\n```\n\n## 重构分离\n\n> `main.go`\n\n```go\npackage main\n\nimport (\n\t"goLearn/common"\n\t"goLearn/route"\n\n\t"github.com/gin-gonic/gin"\n)\n\nfunc main() {\n\n\t// 初始化数据库\n\tdb := common.InitDB()\n\t// 延迟关闭\n\tdefer db.Close()\n\n\t// gin初始化\n\tr := gin.Default()\n\tr = route.CollectRoute(r)\n\t// 监听 处理函数得到一个gin.Context指针{上下文}\n\n\tpanic(r.Run())\n\n}\n```\n\n> `route.go`\n\n```go\npackage route\n\nimport (\n\t"goLearn/controller"\n\n\t"github.com/gin-gonic/gin"\n)\n\nfunc CollectRoute(r *gin.Engine) *gin.Engine {\n\tr.POST("/api/register", controller.Register)\n\treturn r\n}\n```\n\n> `database.go`\n\n```go\npackage database\n\nimport (\n\t"fmt"\n\n\t"goLearn/model"\n\n\t_ "github.com/go-sql-driver/mysql"\n\t"github.com/jinzhu/gorm"\n)\n\nvar DB *gorm.DB\n\nfunc InitDB() *gorm.DB {\n\tdriverName := "mysql"\n\thost := "localhost"\n\tport := "3306"\n\tusername := "root"\n\tpassword := "1234"\n    // 别忘了建这个数据库\n\tdatabase := "fzf404"\n\tcharset := "utf8"\n\t// 连接信息格式化\n\targs := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=%s&parseTime=true",\n\t\tusername,\n\t\tpassword,\n\t\thost,\n\t\tport,\n\t\tdatabase,\n\t\tcharset,\n\t)\n\tprintln(args)\n\t// 打开连接\n\tdb, err := gorm.Open(driverName, args)\n\t// 错误处理\n\tif err != nil {\n\t\tpanic("failed to connect databas. err:" + err.Error())\n\t}\n\t// Auto创建表\n\tdb.AutoMigrate(&model.User{})\n\tDB = db\n\treturn db\n}\n\nfunc GetDB() *gorm.DB {\n\treturn DB\n}\n```\n\n> `userController`\n\n```go\npackage controller\n\nimport (\n\t"log"\n\n\t"goLearn/database"\n\t"goLearn/model"\n\t"goLearn/util"\n\n\t"github.com/gin-gonic/gin"\n\t"github.com/jinzhu/gorm"\n)\n\nfunc Register(ctx *gin.Context) {\n\tDB := database.GetDB()\n\t// Get data\n\tname := ctx.PostForm("name")\n\tsex := ctx.PostForm("sex")\n\tpasswd := ctx.PostForm("passwd")\n\tsex_num := true\n\t// Confirm data\n\tif sex == "1" {\n\t\tsex_num = true\n\t} else if sex == "0" {\n\t\tsex_num = false\n\t} else {\n\t\t// gin.H()生成map对象\n\t\tctx.JSON(422, gin.H{\n\t\t\t// 另外一种写法\n\t\t\t// http.StatusUnprocessableEntity, map[string]interface{}{"code"...}\n\t\t\t"code": 422, "msg": "你是外星人吗？",\n\t\t})\n\t\treturn\n\t}\n\n\tif len(passwd) < 6 {\n\t\tctx.JSON(422, gin.H{\n\t\t\t"code": 422, "msg": "密码太短了！",\n\t\t})\n\t\treturn\n\t}\n\n\tif len(name) == 0 {\n\t\t// 随机用户名\n\t\tname = util.RandomString(10)\n\t}\n\n\tif isNameExist(DB, name) {\n\t\tctx.JSON(422, gin.H{\n\t\t\t"code": 422, "msg": "用户名已存在",\n\t\t})\n\t\treturn\n\t}\n\n\tnewUser := model.User{\n\t\tName:     name,\n\t\tSex:      sex_num,\n\t\tPassword: passwd,\n\t}\n\t// 创建用户\n\tDB.Create(&newUser)\n\t// 调试打印信息\n\tlog.Println(name, sex, passwd)\n\tctx.JSON(200, gin.H{\n\t\t"code": 200, "msg": "注册成功",\n\t})\n}\n\n// 判断用户是否存在 传入db指针 用户名 返回bool值\nfunc isNameExist(db *gorm.DB, name string) bool {\n\t// 创建结构体\n\tvar user model.User\n\t// 使用where name=<input_name>判断 user结构体解析数据\n\tdb.Where("name = ?", name).First(&user)\n\tif user.ID != 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n```\n\n> `util.go`\n\n```go\npackage util\n\nimport (\n\t"math/rand"\n\t"time"\n)\n\nfunc RandomString(n int) string {\n\n\tletters := []byte("asdfghjklzxcvbnmqwertyuiopASDFGHJKLZXCVBNMQWERTYUIOP")\n\tresult := make([]byte, n)\n\n\trand.Seed(time.Now().Unix())\n\n\tfor i := range result {\n\t\tresult[i] = letters[rand.Intn(len(letters))]\n\t}\n\treturn string(result)\n}\n\n```\n\n> `user.go`\n\n```go\npackage model\n\nimport "github.com/jinzhu/gorm"\n\n// Table的结构\ntype User struct {\n\tgorm.Model\n\tName     string `gorm:"type:varchar(20);not null`\n\tSex      bool   `gorm:"type:bool;not null"`\n\tPassword string `gorm:"size:255;not null`\n```\n'}}]);