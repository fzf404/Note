(window.webpackJsonp=window.webpackJsonp||[]).push([[325],{953:function(n,F){n.exports='\x3c!--\ntitle: 01-基础知识\nsort:\n--\x3e\n\n# 逆向基础知识\n\n## 进制\n\n- 十六进制表\n\n  | 4   | 5   | 6   | 7   | 8    | 9    | A    | B    | C    | D    | E    | F    |\n  | --- | --- | --- | --- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n  | 100 | 101 | 110 | 111 | 1000 | 1001 | 1010 | 1011 | 1100 | 1101 | 1110 | 1111 |\n\n## 逻辑运算\n\n- XOR\n\n  > 异或两次得到同一个值\n\n## 寄存器\n\n<img src="https://img-1257284600.cos.ap-beijing.myqcloud.com/2021/202111301535147.jpg" alt="图片" style="zoom: 67%;" />\n\n- **32 位通用寄存器**\n\n  | 寄存器 | 主要用途                              | 编号 | 存储数据的范围 |\n  | ------ | ------------------------------------- | ---- | -------------- |\n  | EAX    | 累加器                                | 0    | 0 - 0xFFFFFFFF |\n  | ECX    | 计数                                  | 1    | 0 - 0xFFFFFFFF |\n  | EDX    | I/O 指针                              | 2    | 0 - 0xFFFFFFFF |\n  | EBX    | DS 段的数据指针                       | 3    | 0 - 0xFFFFFFFF |\n  | ESP    | 堆栈指针                              | 4    | 0 - 0xFFFFFFFF |\n  | EBP    | SS 段的数据指针                       | 5    | 0 - 0xFFFFFFFF |\n  | ESI    | 字符串操作的源指针；SS 段的数据指针   | 6    | 0 - 0xFFFFFFFF |\n  | EDI    | 字符串操作的目标指针；ES 段的数据指针 | 7    | 0 - 0xFFFFFFFF |\n\n- 寄存器位数\n\n  > EAX-AX-AH-Al\n  >\n  > 32bit-16-8-8\n\n- 段寄存器\n\n  > 内存单元的物理地址：段寄存器的值+偏移量\n\n  | 寄存器 | 主要用途                                       |\n  | ------ | ---------------------------------------------- |\n  | CS     | 代码段寄存器，指向包含程序指令的段。           |\n  | SS     | 栈段寄存器，指向包含当前程序栈的段。           |\n  | DS     | 数据段寄存器，此后的所有地址都作为此地址的偏移 |\n  | ES     | 附加段寄存器，串操作指令中目的串所在的段。     |\n\n- 指令指针寄存器\n\n  > EIP: 与 CS 一同指向即将执行的指令的地址\n\n## 汇编\n\n- MOV\n\n  > MOV 目标, 源\n  >\n  > MOV 内存/目标寄存器，内存/目标寄存器/立即数\n  >\n  > - 注：左右两边不能同时为内存\n  >\n  > **书写内存的格式：**\n  >\n  > 1. `MOV [内存地址], 数据`\n  >\n  > 2. `MOV 数据宽度 ptr ds:[内存地址], 数据`\n  >\n  >    > 一个内存地址对应 8bit，也就是一个 byte\n  >    >\n  >    > 这种方法可以顺序写入。\n  >\n  > 3. `[内存地址*{1,2,4,8}+立即数]`\n  >\n  > | 数据宽度      | 范围       |\n  > | ------------- | ---------- |\n  > | byte - 8bit   | 0xFF       |\n  > | word - 16bit  | 0xFFFF     |\n  > | dword - 32bit | 0xFFFFFFFF |\n  >\n  > ```assembly\n  > MOV eax, ecx\n  > MOV\tax, 0xF404\n  > MOV word ptr Ds:[0x12345678], 0xFFFF\t; 向内存中写入数据\n  > ```\n\n- ADD/SUB\n\n  > ```assembly\n  > MOV eax, 0x1\t; ax:0x00000001\n  > ADD eax, 0x1 \t; ax:0x00000002\n  > SUB eax, 0x3\t; ax:0xFFFFFFFF\n  > ```\n\n- AND/OR/NOT/XOR\n\n  > AND 一一得一\n  >\n  > OR 有一得一\n  >\n  > XOR 不同为一\n  >\n  > NOT 取反\n  >\n  > ```assembly\n  > MOV eax, 0x4\t; ax: 0100\n  > XOR eax, 0x5\t; reg:0101\n  > NOP\t\t\t\t; ax: 0001\n  > ```\n'}}]);