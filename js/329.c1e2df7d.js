(window.webpackJsonp=window.webpackJsonp||[]).push([[329],{957:function(n,t){n.exports='\x3c!--\ntitle: 05-C与汇编\nsort:\n--\x3e\n\n# C 与汇编\n\n## 第一个 C 汇编程序\n\n```c\n#include "stdafx.h"\n\nint add(int x, int y)\n{\n\treturn x+y;\n}\n\nint main(int argc, char* argv[])\n{\n\tadd(1,2);\n\treturn 0;\n}\n```\n\n### 转为汇编\n\n```assembly\nPUSH 2\nPUSH 1\nCALL 0040100A\n\nPUSH EBP\t; 将栈底地址push\nMOV EBP,ESP\t; ESP提升至EBP\nSUB ESP,40\t; 将栈顶提升0x40h\nPUSH EBX\t; 保护现场\nPUSH ESI\nPUSH EDI\n\nLEA EDI,DWORD PTR SS:[EBP-40]\t; 将ESP所在地址传入EDI中\nMOV ECX,10\t; 设置循环次数为16\nMOV EAX,CCCCCCCC\nREP STOS DWORD PTR ES:[EDI]\t\t; 开始填充缓冲区\n\nMOV EAX,DWORD PTR SS:[EBP+8]\t; 拿出数据\nADD EAX,DWORD PTR SS:[EBP+C]\n\nPOP EDI\t\t; 恢复现场\nPOP ESI\nPOP EBX\nMOV ESP,EBP\t; ESP下降回原点\nPOP EBP\t\t; EBP返回原点\nRETN\t\t; 拿出EIP\n```\n\n## 函数与汇编\n\n```c\nvoid __declspec(naked) func(){}\t\t// 裸函数,不可调用\nvoid __declspec(naked) func1(){\t\t// 自己写汇编\n    __asm{\n\t\tpush ebp\n\t\tmov ebp,esp\n\t\tsub esp,0x40\n\n\t\tpush ebx\n\t\tpush esi\n\t\tpush edi\n\n\t\tmov eax,0xCCCCCCCC\n\t\tmov ecx,0x10\n\t\tlea edi,dword ptr ds:[ebp-0x40]\n\t\trep stosd\n\n\t\tmov eax,dword ptr ds:[ebp+8]\n\t\tadd eax,dword ptr ds:[ebp+0xC]\n\n\t\tpop edi\n\t\tpop esi\n\t\tpop ebx\n\n\t\tmov esp,ebp\n\t\tpop ebp\n\n        ret\n    }\n}\n```\n\n### 调用约定\n\n| 调用约定     | 压栈顺序                         | 平衡堆栈               |\n| ------------ | -------------------------------- | ---------------------- |\n| \\_\\_cdec     | （默认）                         | 调用者清理栈           |\n| \\_\\_stdcall  | 右至左                           | 自身清理堆栈（内平栈） |\n| \\_\\_fastcall | edx 与 ecx 存值（超过俩则 push） | 无需平栈（内平栈）     |\n\n## C 的数据类型\n\n- 基本类型\n\n  > 整数类型\n  >\n  > - char--byte\n  > - short--word\n  > - int--dword\n  > - long\n  > - unsigned--(默认为 int)\n  >\n  > 浮点类型\n  >\n  > - float\n  >\n  >   > 小数转二进制\n  >   >\n  >   > 不断乘 2，直到结果为 1\n  >\n  >   小数点左移到高位为 1\n  >\n  >   `8.25`\n  >\n  >   | 符号位 1 | 指数位 8   | 有效数字 23        |\n  >   | -------- | ---------- | ------------------ |\n  >   | 0        | 100 0001 0 | 000 1000 0000 0000 |\n  >\n  >   `0.25`\n  >\n  >   | 符号位 1 | 指数位 8   | 有效数字 23        |\n  >   | -------- | ---------- | ------------------ |\n  >   | 0        | 011 1110 1 | 000 0000 0000 0000 |\n\n- 构造类型\n\n- 指针类型\n\n- 空类型\n\n### 基本类型的汇编\n\n- `char i = 0xFF;`\n\n  > `MOV byte ptr [ebp-4],0FFh`\n\n- `int i = 0xFFFF;`\n\n  > `MOV dword ptr [ebp-8],0FFFFh`\n'}}]);