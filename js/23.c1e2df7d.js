(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{651:function(n,t){n.exports='\x3c!--\ntitle: 31-Manjaro配置\nsort:\n--\x3e\n\n# Manjaro 配置\n\n`screenfetch`\n\n## 安装\n\n```bash\nSecure boot disenable\n```\n\n## 配置中国镜像\n\n> ```bash\n> sudo pacman-mirrors -i -c China -m rank\n> # 查看是否有China条目\n> # cat /etc/pacman.d/mirrorlist\n> kate /etc/pacman.conf\n> # 添加如下条目\n> [archlinuxcn]\n> SigLevel = Optional TrustedOnly\n> Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n> # Ctrl+S\t保存\n> # 导入 GPG key\n> sudo pacman -Sy archlinuxcn-keyring\n> # 更新系统\n> sudo pacman -Syyu\n> ```\n\n## 安装软件包\n\n- SSH\n\n  ```bash\n  systemctl enable sshd.service\n  systemctl start sshd.service\n  ```\n\n- 输入法\n\n  ```bash\n  # 安装中文输入法\n  yay -S fcitx-im kcm-fcitx fcitx-sogoupinyin\n  kate ~/.xprofile\n  # 添加如下条目\n  \texport GTK_MODULE=fcitx\n  \texport QT_IM_MODULE=fcitx\n  \texport XMODIFIERS="@im=fcitx"\n  ```\n\n- 翻墙\n\n  > [electron-ssr](https://github.com/qingshuisiyuan/electron-ssr-backup)\n  >\n  > ```shell\n  > # 翻墙\n  > git config --global http.proxy \'http://127.0.0.1:12333\'\n  > git config --global https.proxy \'http://127.0.0.1:12333\'\n  >\n  > export all_proxy=http://127.0.0.1:12333\n  > # export http_proxy=http://127.0.0.1:12333\n  > # export https_proxy=http://127.0.0.1:12333\n  >\n  > # un翻墙\n  > git config --global --unset http.proxy\n  > git config --global --unset https.proxy\n  > unset ALL_PROXY\n  > ```\n\n- 各种软件\n\n  ```bash\n  sudo pacman -S yay\t\t# 安装arch的包管理工具\n  # 更换yay的源文件\n  # yay --aururl "https://aur.tuna.tsinghua.edu.cn" --save\n  # yay -P -g\t查看配置文件\n  yay -S typora\t# Markdown编辑器\n  yay -S netease-cloud-music\n  yay -S google-chrome-dev\n  yay -S visual-studio-code-bin\t# 直接使用code\n  yay -S deepin.com.qq.office\n  # deepin-wine-tim\n  yay -Sy gnome-settings-daemon\n  # 安装过程输入n\n  # 安装wine-mono\n  yay -S vim\n  # c语言环境\n  yay -S gcc gdb\n  # 录屏\n  yay -S simplescreenecorder\n  # 显示输入\n  yay -S screenkey\n  yay -S github-cli\t# githubCLI\n  yay -S figlet\t\t# word2paint\n  yay -S dotnet-host dotnet-runtime dotnet-sdk\t# CSharp\n\n  gimp\n  # polybar\n  mkdir ~/.config/polybar\n  cp /usr/share/doc/polybar/config ~/.config/polybar\n  ```\n\n- 专业软件\n\n  ```bash\n  curl -sLf https://spacevim.org/cn/install.sh | bash\n  ```\n\n### docker\n\n1. 安装\n\n   `yay -S docker`\n\n2. 运行\n\n   ```bash\n   sudo systemctl start docker\n   sudo systemctl enable docker\t# 开机自启\n   sudo docker version\t\t# docker版本\n   sudo docker login\t\t# 登录\n   sudo docker run hello-world\t\t# 运行hello-world\n   ```\n\n3. 擦的权限管理\n\n   ```bash\n   cat /etc/group | grep docker # 查找 docker 组，确认其是否存在\n   groups # 列出自己的用户组，确认自己在不在 docker 组中\n\n   # 如果 docker 组不存在，则添加之：\n   sudo groupadd docker\n\n   # 将当前用户添加到 docker 组\n   sudo gpasswd -a ${USER} docker\n\n   # 重启服务\n   sudo service docker restart\n\n   # 切换一下用户组（刷新缓存）\n   newgrp - docker;\n   newgrp - `groups ${USER} | cut -d\' \' -f1`; # TODO：必须逐行执行，不知道为什么，批量执行时第二条不会生效\n   # 或者，注销并重新登录\n   pkill X\n   ```\n\n4. 运行\n\n   ```bash\n   docker run -d -p 8080:8888 jupyter/datascience-notebook\n   docker logs ~\n   # 再次运行\n   docker start ~\n   ```\n\n## 问题\n\n- 时间不同步\n\n  ```bash\n  sudo timedatectl set-local-rtc 1\n  ```\n\n- 声音\n\n  ```bash\n  sudo alsamixer\t\t# 修改音量\n  sudo alsactl store\t# 保存设置\n  ```\n\n- TIM\n\n  ```bash\n  kate ~/.zshrc\n  alias tim="echo "2309" | /opt/deepinwine/apps/Deepin-TIM/start.sh"\n  alias ll=\'ls -al\'\n  alias la=\'ls -a\'\n  # 在run.sh中添加\n  export XMODIFIERS="@im=fcitx"\n  export GTK_IM_MODULE="fcitx"\n  export QT_IM_MODULE="fcitx"\n  ```\n\n- `yay -R hardcode-fixer`\n'}}]);