(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{824:function(n,t){n.exports='\x3c!--\ntitle: 01-CSharp入门\nsort:\n--\x3e\n\n# CSharp 入门\n\n## 安装\n\n> 安装`.NET Core`\n>\n> 验证安装：`dotnet`\n>\n> `.NET Core` 是 CLR(Common Language Runtime)与 FCL(Framework Class Library)\n\n## 第一个 C#程序\n\n```powershell\n# 生成第一个程序\ndotnet new console --name FirstCSharp\n# 运行\ndotnet run\n```\n\n```c#\n// 不使用using 则:System.Console.WriteLine()\nusing System;\t// 引用命名空间\n\nnamespace FirstCSharp\t// 声明类的命名空间\n{\n    class Program\t\t// 声明类\n    {\n        static void Main(string[] args)\t\t// 声明静态无返回值方法\n        {\n            Console.WriteLine(TempConvert(100));   // 调用方法\n        }\n        static double TempConvert(double F)\t\t// 声明静态有返回值方法\n        {\n            double C = (F - 32) / 1.8;     // 将表达式运行结果存放在本地变量中\n            return C;\n        }\n    }\n}\n```\n\n## Dotnet\n\n```powershell\n# 生成dll文件\ndotnet restore\t\t# 恢复引用的库\ndotnet build\t\t# 把.cs编译成Assembly(.dll)\ndotnet .\\bin\\Debug\\netcoreapp3.1\\FirstCSharp.dll\t# 运行生成的dll\n```\n\n## 基础语法\n\n> 基础语法大多与 c++相同\n>\n> 所有值都是类型的实例\n\n## 面向对象\n\n```c#\n// 包含命名空间\nusing System;\n// 声明命名空间\nnamespace FirstCsharp\n{\n    // 一个class\n\tpublic class ProLang\n\t{\n        // 成员变量\n\t\tstring name;\n\t\tstring describe;\n\t\tpublic ProLang(string unitname,string unitdes)\n\t\t{\n\t\t\tname = unitname;\n\t\t\tdescribe = unitdes;\n\t\t}\n\t\tpublic void Python()\n\t\t{\n\t\t\tname = "Python";\n\t\t\tdescribe = "The Best Script Program Language";\n\t\t}\n\t\tpublic void Display()\n\t\t{\n\t\t\tConsole.WriteLine(name + ": " + describe);\n\t\t}\n\t}\n    // 包含Main函数和实例化ProLang的class\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine("Hello World!");\n\t\t\tProLang csharp = new ProLang("c#","I\'m Best!");\n\t\t\tcsharp.Display();\n\t\t\tcsharp.Python();\n\t\t\tcsharp.Display();\n\t\t}\n    }\n}\n\n```\n\n### 例子\n\n```c#\nusing System;\t// 引用命名空间\n\nnamespace FirstCSharp\t// 声明类的命名空间\n{\n    class Program\t\t// 声明类名\n    {\n        static void Main(string[] args)\t\t// 声明静态无返回值方法。静态函数不能被引用\n        {\n            // 使用构造参数实例化：英尺2英寸\n            UnitConvert feetToInchConv = new UnitConvert(12);\n            // 英里2英尺\n            UnitConvert mileToFeetConv = new UnitConvert(5280);\n            // 报错。因为ratio默认为private，声明为publi才可以访问。\n            // Console.WriteLine(feetToInchConv.ratio);\n            // 调动类的实例方法\n            Console.WriteLine(feetToInchConv.Conver(mileToFeetConv.Conver(3)));\n        }\n    }\n    // 复杂类型\n    public class UnitConvert\n    {\n        // 数据成员\n        // 静态类无法创建实例\n        public static bool Flag = true;\n        int ratio; // Field 字段\n\n        // 用于构建实例\n        public UnitConvert(int unitRatio) // Contstructor 构造函数\n        {\n            ratio = unitRatio;\n        }\n        public int Conver(int unit) // Method 方法\n        {\n            return unit * ratio;\n        }\n    }\n}\n```\n'}}]);