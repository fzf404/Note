(window.webpackJsonp=window.webpackJsonp||[]).push([[451],{1079:function(n,e){n.exports='\x3c!--\ntitle: 41-TypeScript入门\nsort:\n--\x3e\n\n> 使用 TypeScrip 开发\n>\n> [在线 TS 编译运行](https://www.tslang.cn/play/index.html)\n\n```bash\n# 在node项目中使用ts\nyarn add typescript\nyarn tsc filename.ts --watch\n```\n\n## 类型\n\n```typescript\nlet str: string = "abc";\nlet strs: string[] = ["a", "b", "c"];\n// let b: Array<string>; 另一种方法\n\nlet num: number = 1;\nlet nums: number[] = [1, 2, 3];\n\nlet bool: boolean = true;\n\n// 元组\nlet tuple: [string, number, boolean];\n// 联合数组\nlet union: (number | string)[];\n\nlet g: any = 1;\nlet h: any = "a";\n\nlet obj: object = { name: "fzf", age: 18 };\n\n// 枚举\nenum Gender {\n  Male,\n  Femal,\n}\nlet val: Gender;\nval = Gender.Male;\n// val = Gender.Femal;\n\nfunction fun(): void {\n  alert(1);\n}\n\nlet hello = (name: string): string => `Hello ${name}`;\nlet obj = { a: 1, b: 1 };\nlet add = ({ a, b }: { a: number; b: number }) => {\n  a + b;\n};\n```\n\n## 函数\n\n```typescript\n// (参数名:参数类型):返回值类型\nfunction WYN(name:string):void {\n  console.log(name);\n}\n\n// type 声明函数\ntype AddFun = (a:number, b:number)=>number;\n// interface 声明函数\ninterface AddFun {\n \t (a:number, b:number):number\n}\n// 函数实现\nlet add:AddFun = function (x, y) {\n    return x + y;\n};\nlet res = add(30, 20);\n\n// 正常参数 默认参数 可选参数\nfunction add(x:number, y:number=10, z?:number):number {\n  return x + y + (z ? z : 0);\n}\n// 更多参数\n...args:number[]\n\n// 箭头函数\t传参\tf\nlet getArray = (value:any, items:number = 5):any[]=>{\n  return new Array(items).fill(value);\n};\n```\n\n## 接口\n\n```typescript\ninterface Todo {\n  content: string;\n  // 只读\n  readonly user: string;\n  // ?可选\n  time?: string;\n  isCompleted: boolean;\n}\n\n// 创建实例\nlet todo01: Todo = {\n  content: "Learn TypeScript",\n  user: "fzf404",\n  time: "2020-5-20 19:47",\n  isCompleted: false,\n};\n\n// 解构赋值\nfunction getTodo({ content, time, isCompleted }: Todo): void {\n  console.log(`${isCompleted ? "已完成" : "未完成"}: ${content}\\n${time}`);\n}\n\ngetTodo(todo01);\n\n// 索引签名\ninterface Setp {\n  [propName: number]: string;\n}\n\nlet arr: Setp = {\n  0: "1.查找官方文档",\n  1: "2.在线TS编辑器实验",\n  2: "3.使用TS开发React应用",\n};\n\nconsole.log(arr);\n\n// 继承\ninterface TodoInfo extends Todo, Setp {\n  doing: boolean;\n}\n\nlet todoinfo01: TodoInfo = {\n  ...Todo,\n  ...Setp,\n  doing: false,\n};\n```\n\n## 枚举\n\n```typescript\nenum UserId {\n  tuture,\n  mRcfps,\n  crxk,\n  pftom,\n  holy,\n}\n\ninterface Todo {\n  content: string;\n  // 设置枚举\n  user: UserId;\n  time: string;\n  isCompleted: boolean;\n}\n```\n\n## 类\n\n```typescript\nclass Person {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  greet() {\n    return `${this.name} say: hi~`;\n  }\n}\n\nlet fzf = new Person("fzf");\nconsole.log(fzf.greet());\n// fzf say: hi~\n\n// 继承\nclass Student extends Person {\n  private major: string;\n  constructor(name: string, major: string) {\n    super(name);\n    this.major = major;\n  }\n  studentGreet() {\n    return `${this.major} manjor\'s ${this.name} say hi~.`;\n  }\n}\n\nlet fzf = new Student("fzf", "anime");\nconsole.log(fzf.studentGreet());\n// anime manjor\'s fzf say hi~.\n```\n'}}]);