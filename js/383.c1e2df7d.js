(window.webpackJsonp=window.webpackJsonp||[]).push([[383],{1011:function(n,o){n.exports='\x3c!--\ntitle: Docker\nsort:\n--\x3e\n\n# Docker 入门\n\n## 安装\n\n> [清华安装源](https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/)\n\n## 基础操作\n\n> [官方安装文档](https://docs.docker.com/engine/install/)\n>\n> [阿里镜像源](https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors)\n\n### 安装\n\n```bash\n# 官方一键安装\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n\n# 国内一键安装\nbash <(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)\n\n# 启动\nsystemctl start docker\nsystemctl enable docker\n\n# 测试\ndocker run hello-world\n\n# 换源\nvim /etc/docker/daemon.json # 编辑配置文件\n{\n  "registry-mirrors": ["https://mirror.ccs.tencentyun.com"]\n}\n# 重新加载\nsudo systemctl daemon-reload \nsudo systemctl restart docker\n```\n\n### 问题\n\n```bash\n# 新建docker组\nsudo groupadd docker\n# 权限移交给非 root 用户\nsudo usermod -aG docker $USER\n# 激活更改\nnewgrp docker\n\n# snap docker 配置文件\nsudo vim /var/snap/docker/xxxx/config/daemon.json\n# 重启docker\nsudo snap restart docker\n```\n\n### 基础命令\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/1613913/1625373590853-2aaaa76e-d5b5-446b-850a-f6cfa26ac70a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_85%2Ctext_YXRndWlndS5jb20gIOWwmuehheiwtw%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n```bash\n# 拉取镜像\ndocker pull <image_name>\n\n# 查看所有镜像\ndocker images\n# 删除镜像\ndocker rmi <id>\ndocker rmi (docker image -qa)\n# 删除容器\ndocker rm <cid>\ndocker rm (docker ps -qa)\n\n# 更新配置\ndocker update --restart=always <cid>\n\n# 导出\ndocker save -o <path> <id>\n# 导入\ndocker load -i <path>\ndocker tag <id> name:version\n\n# 构建容器 dockerfile\ndocker build -t <name> .\n\n# 容器配置的位置\n/var/lib/docker/containers/xx/config.v2.json\n```\n\n### 操作\n\n```bash\n# 常用参数\ndocker run -d -p 主机端口:镜像端口 <镜像名称>\n# -d 后台运行\n# -p 端口\n# --network=host 使用主机网络\n# --restart=always 自动重启\n# --restart=unless-stopped 自动重启，除非手动停止容器\n\n# 运行并进入\ndocker run -it <name/id>\n\n# 正在运行的容器\ndocker ps [-qa]\n# -q 仅查看id\n# -a 全部容器，包括没有运行的\n\n# 查看日志\ndocker logs -f <cid>\n# 进入容器内\ndocker exec -it <cid> bash\n# 停止/删除\ndocker stop $(docker ps -aq)\ndocker rm $(docker ps -aq)\ndocker rm <cid>\n# 删除无用数据卷\ndocker volume prune\n# 传文件\ndocker cp <file> <cid>:<path>\n# 容器转镜像\ndocker commit <cid>:<img_name>\n\n# 上传镜像\ndocker push fzf404/opus-go\n\n# 修改绑定端口\ndocker stop xxx\t\t# 停止容器\nvim /var/lib/docker/containers/xxx/hostconfig.json\nsystemctl restart docker\t# 重启docker\ndocker start xxx\t# 启动容器\n```\n\n### 数据卷\n\n```bash\n# 创建数据卷\ndocker volume create <name>\n# 数据卷信息\ndocker volume ls\ndocker volume inspect <name>\n# 删除\ndocker volume rm <name>\n# 使用\ndocker run -v <volume>:<c_path>\n/var/lib/docker/volums/<v_name>/_data\n```\n\n### Dockerfile\n\n> 自定义镜像\n\n```dockerfile\n# 编辑Dockerfile\nFROM golang\n# 维护人\nMAINTAINER "me@fzf404.art"\n# 环境变量\nENV GO111MODULE=on \\\n    CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64 \\\n    GOPROXY="https://goproxy.cn,direct"\n# 将此目录作为工作目录\nWORKDIR /opt/opus-go\n# 复制go文件\nCOPY . /opt/opus-go\n# 跑起来\nRUN go build .\n# 开放端口\nEXPOSE 8080\n# 运行命令\nCMD ["./Opus"]\n\n# 制作命令\ndocker build -t <name>:<version> <path>\ndocker build -t fzf404/opus-go:1.0 .\n# 自动在path中寻找Dockerfile\n```\n\n## Docker-Compose\n\n```bash\n# 安装\npip3 install docker-compose\n\ndocker-compose version\ndocker-compose up -d\ndocker-compose down\ndocker-compose start|stop|restart\ndocker-compose ps\n```\n\n### 配置文件\n\n> `docker-compose.yml`\n\n```yml\nversion: "3.1"\nservices:\n  db:\n    image: mariadb\n    container_name: mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: ql2020kpi\n      MYSQL_DATABASE: Opus\n\n  go:\n    image: fzf404/opus-go\n    container_name: opus-go\n    ports:\n      - 8080\n    depends_on:\n      - db\n    links:\n      - db\n    volumes:\n      - /opt/images:/opt/images\n      - /opt/opus-go/config/config.toml:/opt/opus-go/config/config.toml\n\n  web:\n    image: nginx\n    restart: always\n    ports:\n      - 80:80\n    depends_on:\n      - go\n    links:\n      - go\n    volumes:\n      - /opt/opus-web:/opt/opus-web\n      - /opt/nginx/nginx.conf:/etc/nginx/nginx.conf\n      - /opt/images:/opt/images\n```\n\n> `nginx.conf`\n\n```nginx\nworker_processes 1;\n\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  include\t\tmime.types;\n  default_type  application/octet-stream;\n\n  sendfile      on;\n  keepalive_timeout 65;\n\n  server {\n    listen 80 ;l,.\n    server_name localhost;\n\n    location / {\n      root /opt/opus-web;\n    }\n\n    location /api/ {\n      proxy_pass http://opus-go:8080/;\n    }\n\n    location /images/ {\n      root /opt/;\n          }\n  }\n\n}\n\n```\n\n### 常用镜像\n\n```bash\n# mariadb\ndocker run -itd --name mariadb -p 3306:3306 --env MARIADB_ROOT_PASSWORD=fzf404 mariadb\n# redis\ndocker run -itd --name redis -p 6379:6379 redis\n# mongo\ndocker run -itd --name mongo -p 27017:27017 mongo\n```\n'}}]);