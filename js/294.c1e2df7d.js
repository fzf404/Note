(window.webpackJsonp=window.webpackJsonp||[]).push([[294],{922:function(t,n){t.exports="\x3c!--\ntitle: 21-PyQt入门\nsort:\n--\x3e\n\n# PyQt5\n\n- 安装：`pip install pyqt5`\n\n## 第一个 QT5 程序\n\n```python\nfrom PyQt5.QtWidgets import QApplication, QLabel\n\napp = QApplication([])\t# 创建QApplication对象，传入list\n# 这是必须的，就像你找对象一样，只能有一个，多了少了报都不行。\nlabel = QLabel('Hello World')\t# 创建一个标签，并传递显示的内容\nlabel.show()\t# 展示一下对象\napp.exec_()\t\t# 一直展示，除非用户恰柠檬\n```\n\n## 入门\n\n```python\nfrom PyQt5.QtWidgets import *\nimport sys\n\nclass MyWindows(QMainWindow):\n    def __init__(self,*args,**kwargs):\n        # 调用父类的init\n        super(MyWindows, self).__init__(*args,**kwargs)\n\n        # 中心放一串文字\n        label = QLabel('添加一个文本')\n        self.setCentralWidget(label)\n\n\n# 窗口实例化\napp = QApplication(sys.argv)\nwindows = MyWindows()\nwindows.show()\napp.exec_()\n```\n\n### 设置属性样式\n\n```python\n# __init__() 中\nlabel = QLabel()\nlabel.setText('Some Text.')\nlabel.setStyleSheet('color: red')\n# 中心对齐 from PyQt5.QtCore import Qt\nlabel.setAlignment(Qt.AlignCenter)\nself.setCentralWidget(label)\n```\n\n### 布局\n\n```python\n# 建立框架\nwidget = QWidget()\t\t# 最基本的容器\nlayout = QVBoxLayout()\t# 建立一个布局\n# layout = QHBoxLayout() 水平布局\n\n# Layout中的内容\nlabel = QLabel('添加一个文本')\nbutton = QPushButton('按钮')\n# 添加Widget\nlayout.addWidget(label)\nlayout.addWidget(button)\n\n# 整合\nwidget.setLayout(layout)\nself.setCentralWidget(widget)\n\n```\n\n#### 表格布局\n\n```python\n# 建立框架\nwidget = QWidget()\nlayout = QGridLayout()\n# Layout中的内容\nlabel = QLabel('添加一个文本')\nbutton1 = QPushButton('按钮1')\nbutton2 = QPushButton('按钮2')\nbutton3 = QPushButton('按钮3')\nbutton4 = QPushButton('按钮4')\n# 添加Widget\nlayout.addWidget(label, 0, 0)\nlayout.addWidget(button1, 1, 0)\nlayout.addWidget(button2, 1, 1)\nlayout.addWidget(button3, 2, 1)\nlayout.addWidget(button4, 2, 0)\n# 整合\nwidget.setLayout(layout)\nself.setCentralWidget(widget)\n```\n\n## 数据及含义\n\n### Widgets（'不知名的'小器物）\n\n> Qt 程序中每个东西都称之为一个`widget`\n>\n> 包括：按钮、标签、窗口、对话框……\n\n- 常用的`widget`\n\n  ![YcZl.png](https://s1.ax1x.com/2020/05/16/YcZlcD.png)\n\n  > 上下左右的顺序，分别为：\n  >\n  > - [QLabel](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqlabel.html)\n  > - [QComboBox](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqcombobox.html)\n  > - [QCheckBox](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqcheckbox.html)\n  > - [QRadioButton](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqradiobutton.html)\n  > - [QPushButton](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqpushbutton.html)\n  > - [QTableWidget](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqtablewidget.html)\n  > - [QLineEdit](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqlineedit.html)\n  > - [QSlider](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqslider.html)\n  > - [QProgressBar](https://links.jianshu.com/go?to=http%3A%2F%2Fdoc.qt.io%2Fqt-5%2Fqprogressbar.html)\n\n### Layouts（布局）\n\n告诉 qt 如何安放`widgets`\n\n```python\nfrom PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout\n\napp = QApplication([])\t# 先创建QApplication\nwindow = QWidget()\t\t# 创建一个Widget(作为一个容器)\nlayout = QVBoxLayout()\t# 建了一个layout\nlayout.addWidget(QPushButton('Top'))\t# layout中添加widget\nlayout.addWidget(QPushButton('Bottom'))\nwindow.setLayout(layout)\t# 告诉widget使用这个布局\nwindow.show()\t\t\t\t# 展示\napp.exec_()\t\t# 持续直到退出\n\n```\n\n## 自定义风格\n\n使用`.setStyle()`\n\n默认风格是`Flusion`\n\n```python\nfrom PyQt5.QtWidgets import *\napp = QApplication([])\napp.setStyle('Windows')\t# 换成windows风格\n...\n```\n\n## 自定义颜色\n\n使用`QPalette`\n\n```python\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPalette\nfrom PyQt5.QtWidgets import QApplication, QPushButton\n\napp = QApplication([])\napp.setStyle('Fusion')\npalette = QPalette()\t# 创建颜色类\npalette.setColor(QPalette.ButtonText, Qt.red)\napp.setPalette(palette)\t# 设置颜色\nbutton = QPushButton('Hello World')\nbutton.show()\napp.exec_()\n```\n\n## 面板风格\n\n```python\nfrom PyQt5.QtWidgets import QApplication, QPushButton\napp = QApplication([])\napp.setStyleSheet(\"QPushButton { margin: 10ex; }\")\nbutton = QPushButton('Hello World')\nbutton.show()\napp.exec_()\n```\n\n## 事件响应\n\n```python\nfrom PyQt5.QtWidgets import *\napp = QApplication([])\nbutton = QPushButton('Click')\ndef on_button_clicked():\n    alert = QMessageBox()\n    alert.setText('You clicked the button!')\n    alert.exec_()\n\nbutton.clicked.connect(on_button_clicked)\t# 假如点击则连接函数\nbutton.show()\napp.exec_()\n```\n"}}]);