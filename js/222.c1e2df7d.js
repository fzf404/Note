(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{850:function(n,e){n.exports='\x3c!--\ntitle: 12-gRPC服务\nsort:\n--\x3e\n\n## 开始\n\n> 单向流与双向流\n\n### 安装\n\n```bash\n# 初始化\ngo mod init grpc-server\n# 依赖\ngo get google.golang.org/grpc\n\n# 证书\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cery.pem -days 365 -nodes -subj /CN=localhost\n# 设置证书环境变量\nexport GODEBUG=x509ignoreCN=0\n\n# 编译proto\nprotoc --proto_path=./protos ./protos/*.proto --go_out=plugins=grpc:.\n```\n\n### Server\n\n```go\nconst port = ":5000"\n\nunc main() {\n\t// 监听端口\n\tlisten, err := net.Listen("tcp", port)\n\tif err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\t// 证书加载\n\tcreds, err := credentials.NewServerTLSFromFile("cert.pem", "key.pem")\n\tif err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\toptions := []grpc.ServerOption{grpc.Creds(creds)}\n\t// 初始化server\n\tserver := grpc.NewServer(options...)\n\tpb.RegisterEmployeeServiceServer(server, new(employeeService))\n\tlog.Println("gRPC Server Started.")\n\tlog.Println("Listen in", port)\n\t// 持续监听\n\tserver.Serve(listen)\n}\n\n// 定义方法实现结构体\ntype employeeService struct{}\n```\n\n### Client\n\n```go\nconst port = ":5000"\n\nfunc main() {\n\t// 加载证书\n\tcreds, err := credentials.NewClientTLSFromFile("cert.pem", "")\n\tif err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\toptions := []grpc.DialOption{grpc.WithTransportCredentials(creds)}\n\t// 获得tcp连接\n\tconn, err := grpc.Dial("localhost"+port, options...)\n\tif err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\tdefer conn.Close()\n\t// 初始化客户端\n\tclient := pb.NewEmployeeServiceClient(conn)\n\t// 调用各个方法\n\tGetByNo(client)\n\tGetAll(client)\n\tAddPhoto(client)\n\tSaveAll(client)\n}\n```\n'}}]);