(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{663:function(n,t){n.exports="\x3c!--\ntitle: 05-梯度下降\nsort:\n--\x3e\n\n> 梯度下降求解方程的 wb 值\n>\n> $loss = \\sum_{i}(wx + b - y)^2$\n>\n> 标准梯度下降法(GD, Gradient Descent)\n>\n> 随机梯度下降法(SGD, Stochastic Gradient Descent)\n\n## 梯度计算\n\n> $b_{new} = b-lr \\frac{\\Delta loss}{\\Delta b} = b - lr \\cdot 2(wx+b-y)$\n>\n> $w_{new} = w - lr\\frac{\\Delta loss}{\\Delta w} = w- lr \\cdot 2x(wx+b-y)$\n\n```python\ndef step_gradient(b, w, points, lr):\n    b_gradient = 0\n    w_gradient = 0\n    N = float(len(points))\n    for i in range(len(points)):\n        x = points[i, 0]\n        y = points[i, 1]\n        # 梯度值\n        b_gradient += -(2/N) * (y - ((w * x) + b))\n        w_gradient += -(2/N) * x * (y - ((w * x) + b))\n    b_new = b - (lr * b_gradient)\n    w_new = w - (lr * w_gradient)\n    return [b_new,w_new]\n```\n\n## 误差计算\n\n```python\ndef compute_error_for_line_given_points(b, w, points):\n    totalError = 0\n    for i in range(0, len(points)):\n        x = points[i, 0]\n        y = points[i, 1]\n        totalError += (y - (w * x + b)) ** 2\n    return totalError / float(len(points))\n```\n\n## 训练\n\n```python\nlearn_rate = 0.0001\nb = 0\nw = 0\niterations = 1000\n\nprint(f\"Start b = {b}, w = {w}, error = {compute_error_for_line_given_points(b,w,points)}\")\n\nfor i in range(iterations):\n    b,w = step_gradient(b,w,np.array(points),learn_rate)\n\nprint(f\"After b = {b}, w = {w}, error = {compute_error_for_line_given_points(b,w,points)}\")\n```\n\n## 预测绘图\n\n```python\n# 绘制图表\nx = points[:,0]\nw = 1.4777440851894448\nb = 0.08893651993741346\ny = w * x + b\n\nplt.scatter(points[:,0], points[:,1], c = '', edgecolors = 'b', s = 15, label = 'orginal')\nplt.plot(x,y,c = 'r',label = 'predict',linestyle = ':')\nplt.legend()\n```\n\n![img](https://img-1257284600.cos.ap-beijing.myqcloud.com/2021/download.png)\n"}}]);