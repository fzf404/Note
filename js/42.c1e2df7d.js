(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{670:function(n,t){n.exports="\x3c!--\ntitle: 14-卷积神经网络\nsort:\n--\x3e\n\n> 使用卷积核提取图片特征值\n\n### 二维卷积\n\n```python\nfrom torch.nn import functional as F\n\n# 图像信息:个数、通道数、长宽像素数\nx = torch.randn(1,3,28,28)\n# 核数、通道数、核的长宽\nw = torch.rand(16,3,5,5)\nb = torch.rand(16)\n# 核的步长值，图像向外补充像素数\nout = F.conv2d(x,w,b,stride = 1,padding = 1)\n\nimport torch.nn as nn\n# 图像个数、通道数、核大小、步长、补偿\nlayer = nn.Conv2d(1,3,kernel_size = 3,stride = 1,padding = 1)\nout = layer.forward(x)\n```\n\n### 池化与升采样\n\n> 池化: 压缩输入的特征图\n>\n> 升采样: 沿特定轴缩放\n\n```python\n# 读图片\nimg = torch.from_numpy(cv2.imread('test.jpg')/255)\n# 使用torchvision\n# import torchvision.transforms.functional as vF\n# img = vF.to_tensor(cv2.imread('test.jpg'))\nplt.imshow(img)\nimg.size()\t\t# ([160, 160, 3])\n\n# 最大值池化 保留2*2区间内像素最大值\nlayer = nn.MaxPool2d(2, stride = 2)\nout = layer(img_tensor.T)\nout.T.size()\t# ([80, 80, 3])\nplt.imshow(out.T)\n\n# 平均值池化 保留2*2区间内平均值\nout = F.avg_pool2d(img.T, 2, stride = 2)\nplt.imshow(out.T)\nout.T.size()\t\t# ([80, 80, 3])\n\n# 升采样： 图像，缩放系数，模式\nout = F.interpolate(img.T, scale_factor = 0.5, mode = 'nearest')\nplt.imshow(out.T)\n```\n\n### BatchNorm\n\n> 处理数据区间\n\n```python\nx = torch.rand(100,16,784)\nlayer = nn.BatchNorm1d(16)\nout = layer(x)\n```\n\n## 多层网络\n\n### 网络结构\n\n> 使用 nn.Module 定义网络\n\n```python\nfrom torch import nn\n\nnet = nn.Sequential(\n    nn.Linear(4, 2),  # 输入维度4*2,输出维度2的线性层\n    nn.Linear(2, 2)  # 输入维度2*2,输出维度2的线性层\n)\n# 使用优化器\noptimizer = optim.SGD(net.parameters(), lr=learning_rate)\n```\n\n#### 树形结构\n\n```python\nfrom torch import nn\n\n# 定义基础网络\nclass BaseNet(nn.Module):\n\n    def __init__(self):\n        super(BaseNet, self).__init__()\n        self.net = nn.Linear(4, 3)\n\n    def forward(self, x):\n        return self.net(x)\n\n\nclass MyNet(nn.Module):\n\n    def __init__(self):\n        super(MyNet, self).__init__()\n        # 使用BaseNet\n        self.net = nn.Sequential(\n            BaseNet(),\n            nn.ReLU(),\n            nn.Linear(3, 2)\n        )\n    def forward(self, x):\n        return self.net(x)\n```\n"}}]);