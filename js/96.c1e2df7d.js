(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{724:function(n,e){n.exports="\x3c!-- \ntitle: 11-Vue3入门\nsort: \n--\x3e\n\n## 声明式渲染\n\n```vue\n<script setup>\nimport { ref, reactive } from 'vue';\n\n// 响应式数据对象\nconst count = ref(0)\n\n// 使用 reactive 创建复杂数据类型\n// 读取时无需 .value\nconst state = reactive({\n  theme: 'dark',\n  user: {\n    id: 12306,\n    name: 'fzf404',\n    group: '管理员',\n  },\n})\n\nconst reduceCount = () => {\n  count.value--;\n}\n\n<\/script>\n\n<template>\n  <h1>{{ state.user.group }} 你好: {{ state.user.name }}</h1>\n  <button @click=\"count++\">count is: {{ count }}</button>\n  <button @click=\"reduceCount\">count is: {{ count }}</button>\n</template>\n```\n\n## 数据绑定\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst msg = ref('')\n<\/script>\n\n<template>\n  <p>{{ msg }}</p>\n  <input v-model=\"msg\" />\n</template>\n```\n\n## 传参\n\n```vue\n\x3c!-- 父组件 --\x3e\n<template>\n  <Child msg=\"Hello Vue 3 + Vite\" />\n</template>\n\n\x3c!-- 子组件 --\x3e\n<script setup>\ndefineProps({\n  msg: String\n})\n<\/script>\n<template>\n  <h1>{{ msg }}</h1>\n</template>\n\n\x3c!-- 绑定数据 --\x3e\n\x3c!-- 父组件 --\x3e\n<script setup>\n  const msg = ref(\"Hello\")\n<\/script>\n<template>\n  <Child v-model:msg=\"msg\" />\n</template>\n\n\x3c!-- 子组件 --\x3e\n<script setup>\n  // 取值\n  defineProps({\n    msg: String,\n  })\n  // 定义触发器\n  defineEmits([['update:msg']])\n<\/script>\n\n<template>\n  <h1>{{ msg }}</h1>\n  <input type=\"text\" :value=\"msg\" @input=\"$emit('update:msg', $event.target.value)\" />\n</template>\n```\n\n## 触发\n\n```js\nimport { ref, watch, watchEffect } from 'vue'\n\n// 主题\nconst theme = ref('dark')\n\n// 指定监听对象\nconst stopWatch = watch(theme, (newValue, oldValue)=>{\n  console.log(newValue, oldValue);\n})\n\n// 停止监听\nstopWatch()\n\n// 监听内部使用的对象\nwatchEffect(() => {\n  document.documentElement.setAttribute('class', theme.value)\n})\n\n// 另一种方法\nwatch: {\n  user() {\n    this.initGithubData()\n  },\n},\n```\n\n### 触发父组件方法\n\n```vue\n\x3c!-- 父组件 --\x3e\n<script setup>\n  const onChangeTheme = () => {\n    switch (theme.value) {\n      case 'dark':\n        theme.value = 'light'\n        break\n      case 'light':\n        theme.value = 'dark'\n        break\n    }\n  }\n<\/script>\n<template>\n  <Child @change-theme=\"onChangeTheme\" />\n</template>\n  \n\x3c!-- 子组件 --\x3e\n<script setup>\n  defineEmits(['change-theme'])\n<\/script>\n<template>\n  <p @click=\"$emit('change-theme')\">change</p>\n</template>\n```\n\n"}}]);