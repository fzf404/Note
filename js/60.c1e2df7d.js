(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{688:function(n,e){n.exports='\x3c!--\ntitle: 41-Express入门\nsort:\n--\x3e\n\n- 准备\n\n```bash\nnpm i express\n# 检测代码变化并自动重启\nnpm i nodemon --save-dev\n# 模板渲染引擎\nnpm i hbs\n# package.json\n"start": "nodemon server.js",\n```\n\n## HelloWorld\n\n```js\nconst express = require("express");\n\nconst hostname = "localhost";\nconst port = 3000;\n\nconst app = express();\napp.get("/", (req, res) => {\n  res.send("Hello World");\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n```\n\n## Request\n\n- `req.body`：客户端请求体的数据，表单或 JSON 数据\n- `req.params`：请求 URI 中的路径参数\n- `req.query`：请求 URI 中的查询参数\n- `req.cookies`：客户端的 cookies\n\n## Response\n\n```js\n// 发送内容\nres.send("HTML String");\n\n// 发送文件\nres.sendFile("file.zip");\n\n// 渲染模板并发送\nres.render("index");\n\n// 设置状态码为 404，并返回字符串\nres.status(404).send("Page Not Found");\n```\n\n## 功能\n\n```js\n// 路由\napp.get("/", handle, () => {});\n// 中间件\nfunction someMiddleware(req, res, next) {}\napp.use(someMiddleware); // 全局使用\napp.get("/", someMiddleware, () => {}); // 单独使用\n\n// 静态文件中间件\napp.use(express.static("public"));\n```\n\n## mongodb\n\n`npm i mongoose`\n\n- 连接数据库\n\n```js\nconst mongoose = require("mongoose");\nmongoose.connect(`mongodb://39.106.106.202:27017/test`);\n```\n\n- Schema\n\n```js\nconst mongoose = require("mongoose");\nconst Schema = mongoose.Schema;\nconst model = mongoose.model.bind(mongoose);\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst productSchema = Schema({\n  id: ObjectId,\n  name: String,\n  image: String,\n  price: Number,\n  description: String,\n});\n\nconst Product = model("Product", productSchema);\nmodule.exports = { Product, Manufacturer };\n```\n\n- 使用官方库\n\n```js\nconst MongoClient = require("mongodb").MongoClient;\n\nconst uri = "mongodb://user:password@ip";\n\nasync function someFunc() {\n  const client = new MongoClient(uri);\n  await client.connect();\n  const cmd = client.db("testm").collection("users");\n  let data = await cmd.find({}, { projection: { _id: 0 } }).toArray();\n\n  client.close();\n  return data;\n}\n```\n\n## 允许跨域\n\n```js\napp.all("/*", function (req, res, next) {\n  // CORS headers\n  res.header("Access-Control-Allow-Origin", "*"); // restrict it to the required domain\n  res.header("Access-Control-Allow-Methods", "GET,PUT,POST,DELETE,OPTIONS");\n  // Set custom headers for CORS\n  res.header(\n    "Access-Control-Allow-Headers",\n    "Content-type,Accept,X-Access-Token,X-Key"\n  );\n  if (req.method == "OPTIONS") {\n    res.status(200).end();\n  } else {\n    next();\n  }\n});\n```\n'}}]);