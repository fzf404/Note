(window.webpackJsonp=window.webpackJsonp||[]).push([[440],{1068:function(n,e){n.exports='\x3c!--\ntitle: 24-JS对象\nsort:\n--\x3e\n\n# JavaScript 对象\n\n## 自定义对象\n\n> `this` 指代当前的对象。\n\n```js\nfunction makePerson(first, last) {\n  return {\n    first: first,\n    last: last,\n    fullName: function () {\n      return this.first + " " + this.last;\n    },\n    fullNameReversed: function () {\n      return this.last + ", " + this.first;\n    },\n  };\n}\ns = makePerson("Simon", "Willison");\ns.fullName(); // "Simon Willison"\ns.fullNameReversed(); // Willison, Simon\n\n// 使用this改进\nfunction Person(first, last) {\n  this.first = first;\n  this.last = last;\n  this.fullName = function () {\n    return this.first + " " + this.last;\n  };\n  this.fullNameReversed = function () {\n    return this.last + ", " + this.first;\n  };\n}\nvar s = new Person("Simon", "Willison");\n```\n\n> 次创建一个 Person 对象的时候，在其中创建了两个新的函数对象。\n>\n> 更好的方法：\n\n```js\nfunction personFullName() {\n  return this.first + " " + this.last;\n}\nfunction personFullNameReversed() {\n  return this.last + ", " + this.first;\n}\nfunction Person(first, last) {\n  this.first = first;\n  this.last = last;\n  this.fullName = personFullName;\n  this.fullNameReversed = personFullNameReversed;\n}\n```\n\n> `Person.prototype` 是一个可以被`Person`的所有实例共享的对象。\n\n```js\nfunction Person(first, last) {\n  this.first = first;\n  this.last = last;\n}\nPerson.prototype.fullName = function () {\n  return this.first + " " + this.last;\n};\nPerson.prototype.fullNameReversed = function () {\n  return this.last + ", " + this.first;\n};\n```\n\n> 给 JavaScript 的内置函数原型（prototype）添加东西\n\n```js\nvar s = "Simon";\ns.reversed(); // TypeError on line 1: s.reversed is not a function\n\n// 给String添加方法\nString.prototype.reversed = function () {\n  var r = "";\n  for (var i = this.length - 1; i >= 0; i--) {\n    r += this[i];\n  }\n  return r;\n};\ns.reversed(); // nomiS\n```\n\n## 属性描述对象\n\n```js\nvar obj = { fzf: 404 };\n// 获取描述对象的属性\nObject.getOwnPropertyDescriptor(obj, "fzf");\n// {value: 404, writable: true, enumerable: true, configurable: true}\n// 返回对象的全部属性的属性名\nObject.getOwnPropertyNames(obj);\n// 自定义属性\nvar obj = Object.defineProperty({}, "p", {\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false,\n});\n// Object.defineProperties 修改多个\nObject.getOwnPropertyDescriptor(obj, "p");\n// {value: 123, writable: false, enumerable: true, configurable: false}//\n```\n\n### 存取器\n\n```js\nvar obj = Object.defineProperty({}, "p", {\n  get: function () {\n    return "getter";\n  },\n  set: function (value) {\n    console.log("setter: " + value);\n  },\n});\n\nobj.p; // "getter"\nobj.p = 123; // "setter: 123"\n```\n\n## Array\n\n```js\nvar numbers = [1, 2, 3];\n\nnumbers.map(function (n) {\n  return n + 1;\n});\n// [2, 3, 4]\n\nnumbers;\n// [1, 2, 3]\n```\n\n## 正则\n\n```js\n// 以斜杠表示开始和结束\nvar regex = /fzf/;\n// 构造函数\nvar regex = new RegExp(\'fzf\');\n\n// 验证\nregex.test(\'fzf404 is best!\')\ntrue\n\n// 修饰符\nregex = /fzf/g；\n// 全局搜索\nregex.lastIndex\t\t// 0\nregex.test(\'fzf404 is fzf + 404!\')\nregex.lastIndex\t\t// 3\nregex.test(\'fzf404 is fzf + 404!\')\nregex.lastIndex\t\t// 13\n```\n'}}]);