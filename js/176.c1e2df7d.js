(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{804:function(x,n){x.exports="\x3c!--\ntitle: 01-最小系统\nsort:\n--\x3e\n\n## 启动\n\n1. BIOS:\n\n   > 设置 CS:IP 寄存器为`0xffff0`\n   >\n   > 该地址为 blos 程序，进行 POST 自检\n\n2. 主引导记录`MBR`\n\n   > 计算机读取第一个扇区，512 字节\n   >\n   > 最后两个字节内容是`0x55 0xAA`，不然启动顺序的下一个\n\n3. 启动\n\n   > BIOS 将 MBR 读到`0x7C00`\n\n## 自制引导\n\n> 使用二进制编辑器\n>\n> `0x000000-0x168000`: `1.44MB`\n>\n> 剩余 0 填充\n\n![image-20201222223509183](https://img-1257284600.cos.ap-beijing.myqcloud.com/2020/20201222223509.png)\n\n![image-20201222223522180](https://img-1257284600.cos.ap-beijing.myqcloud.com/2020/20201222223522.png)\n\n> 改名`hellofzf.img`\n>\n> 使用`wmware workstation`\n>\n> 新建软盘并使用`hellofzf.img`镜像文件\n\n![image-20201222223447680](https://img-1257284600.cos.ap-beijing.myqcloud.com/2020/20201222223447.png)\n\n### Nasm\n\n> [nasm](https://www.nasm.us/pub/nasm/releasebuilds/)\n\n```assembly\nDB 0xeb,0x4e,0x90,0x48,0x45,0x4c,0x4c,0x4f\nDB 0x49,0x50,0x4c,0x00,0x02,0x01,0x01,0x00\nDB 0x02,0xe0,0x00,0x40,0x0b,0xf0,0x09,0x00\nDB 0x12,0x00,0x02,0x00,0x00,0x00,0x00,0x00\nDB 0x40,0x0b,0x00,0x00,0x00,0x00,0x29,0xff\nDB 0xff,0xff,0xff,0x48,0x45,0x4c,0x4c,0x4f\nDB 0x2d,0x4f,0x53,0x20,0x20,0x20,0x46,0x41\nDB 0x54,0x31,0x32,0x20,0x20,0x20,0x00,0x00\nRESB 16\nDB 0xb8,0x00,0x00,0x8e,0xd0,0xbc,0x00,0x7c\nDB 0x8e,0xd8,0x8e,0xc0,0xbe,0x74,0x7c,0x8a\nDB 0x04,0x83,0xc6,0x01,0x3c,0x00,0x74,0x09\nDB 0xb4,0x0e,0xbb,0x0f,0x00,0xcd,0x10,0xeb\nDB 0xee,0xf4,0xeb,0xfd,0x0a,0x0a,0x48,0x65\nDB 0x6c,0x6c,0x6f,0x2c,0x20,0x66,0x7a,0x66\nDB 0x34,0x30,0x34,0x0a,0x00,0x00,0x00,0x00\nRESB 368\nDB 0x00,0x00,0x00,0x00,0x00,0x00,0x55,0xaa\nDB 0xf0,0xff,0xff,0x00,0x00,0x00,0x00,0x00\nRESB 4600\nDB 0xf0,0xff,\n```\n\n> 编译为 bin 文件\n\n```bash\nnasm -f bin hellofzf.asm -o hellofzf.bin\n```\n\n> 放入 wm 执行，结果相同\n>\n> 更易读的写法\n\n```assembly\nDB 0xeb, 0x4e, 0x90\nDB \"HELLOIPL\" ; 启动区的名称可以是任意的字符串（8字节）\nDW 512 ; 每个扇区（sector）的大小（必须为512字节）\nDB 1 ; 簇（cluster）的大小（必须为1个扇区）\nDW 1 ; FAT的起始位置（一般从第一个扇区开始）\nDB 2 ; FAT的个数（必须为2）\nDW 224 ; 根目录的大小（一般设成224项）\nDW 2880 ; 该磁盘的大小（必须是2880扇区）\nDB 0xf0 ; 磁盘的种类（必须是0xf0）\nDW 9 ; FAT的长度（必须是9扇区）\nDW 18 ; 1个磁道（track）有几个扇区（必须是18）\nDW 2 ; 磁头数（必须是2）\nDD 0 ; 不使用分区，必须是0\nDD 2880 ; 重写一次磁盘大小\nDB 0,0,0x29 ; 意义不明，固定\nDD 0xffffffff ;（可能是）卷标号码\nDB \"HELLO-OS \" ; 磁盘的名称（11字节）\nDB \"FAT12 \" ; 磁盘格式名称（8字节）\nRESB 18 ; 先空出18字节\n; 程序主体\nDB 0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c\nDB 0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a\nDB 0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09\nDB 0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb\nDB 0xee, 0xf4, 0xeb, 0xfd\n; 信息显示部分\nDB 0x0a, 0x0a, 0x0a, 0x0a ; 4个换行\nDB \"hello, fzf404\"\nDB 0x0a ; 换行\nDB 0\nTIMES 510-($-$$) DB 0; 填写0x00,直到 510B\nDB 0x55, 0xaa\n; 以下是启动区以外部分的输出\nDB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\nRESB 4600\nDB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\nRESB 1469432\n```\n\n## 调用 BIOS 中断\n\n> 封装为函数\n\n```assembly\nmbrseg  equ  7c0h ; 启动扇区存放段地址\n\njmp   start\n\nmessage:\n      db 'hello,fzf','$'\n\nstart:\n      mov   ax,mbrseg\n      mov   ds,ax\n      mov   si,message\n      call  printstr\n\nprintstr:                  ; 显示指定的字符串, 以'$'为结束标记\n      mov al,[si]\n      cmp al,'$'\n      je disover\n      mov ah,0eh\n      int 10h\n      inc si\n      jmp printstr\ndisover:\n      ret\n\ntimes 510-($-$$) db 0\ndb 0x55,0xaa\n```\n\n## 实机安装\n\n> u 盘零扇区写入\n>\n> 启动模式选 Legacy\n\n![img](https://img-1257284600.cos.ap-beijing.myqcloud.com/2020/20201228160105.jpg)\n"}}]);