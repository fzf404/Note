(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{817:function(n,t){n.exports='\x3c!--\ntitle: 02-CPP面向对象\nsort:\n--\x3e\n\n# CPP 进阶\n\n## 面向对象\n\n```cpp\n#include <stdio.h>\n\nclass ClassHi {\npublic:\n  ClassHi() {\n    button = false;\n    f = stdout;\n  }\n  ClassHi(FILE *ff) {\n    button = false;\n    f = ff;\n  }\n  void print(char *s) { fprintf(f, "%s\\n", s); }\n  void on() { button = true; }\n  void off() { button = false; }\n\nprivate:\n  bool button;\n  FILE *f;\n};\n\nint main(){\n  ClassHi hi;\n  hi.print((char*)"Hi~Class");\n  ClassHi hi2(stderr);\n  hi.print((char*)"Hi~Class");\n}\n```\n\n### 继承\n\n```cpp\nclass ClassSon : ClassHi { }\n```\n\n### 多态\n\n> 定义虚函数, 子类可以覆写\n\n```cpp\nclass person {\npublic:\n\tvirtual int Price(){\n\t\treturn 10;\n\t}\n};\nclass student : person {\npublic:\n\tvirtual int Price(){\n\t\treturn 5 ;\n\t}\n};\n```\n\n### 函数重载\n\n> 可以定义同名函数,根据参数的不同自动选择调用\n\n### 运算符重载\n\n> 两个自定义数据类型的运算\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Person {\npublic:\n  Person(){};\n  Person(int a, int b) {\n    this->m_A = a;\n    this->m_B = b;\n  }\n  // 成员函数实现 + 号运算符重载\n  // 对象进行+操作时执行此函数\n  Person operator+(const Person &p) {\n    Person temp;\n    temp.m_A = this->m_A + p.m_A;\n    temp.m_B = this->m_B + p.m_B;\n    return temp;\n  }\n\npublic:\n  int m_A;\n  int m_B;\n};\n\n// 全局函数实现 + 号运算符重载\n// Person operator+(const Person& p1, const Person& p2) {\n//  Person temp(0, 0);\n//  temp.m_A = p1.m_A + p2.m_A;\n//  temp.m_B = p1.m_B + p2.m_B;\n//  return temp;\n// }\n\n// 全局函数实现运算符重载\nPerson operator+(const Person &p2, int val) {\n  Person temp;\n  temp.m_A = p2.m_A + val;\n  temp.m_B = p2.m_B + val;\n  return temp;\n}\n\nvoid test() {\n\n  Person p1(10, 10);\n  Person p2(20, 20);\n\n  //成员函数方式\n  Person p3 = p2 + p1; // 相当于 p2.operaor+(p1)\n  cout << "mA:" << p3.m_A << " mB:" << p3.m_B << endl;\n\n  Person p4 = p3 + 10; // 相当于 operator+(p3,10)\n  cout << "mA:" << p4.m_A << " mB:" << p4.m_B << endl;\n}\n\nint main() {\n  test();\n  return 0;\n}\n```\n\n## vector\n\n> vector (向量) 是一个能够存放任意类型的动态数组。\n\n```c++\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main(void)\n{\n    vector<int> v;\n    v.push_back(666);\n    v.push_back(404);\n    v.push_back(233);\n    v.pop_back();\n    for (size_t i = 0; i < v.size(); i++)\n    {\n        cout << v[i] << endl;\n    }\n\n    return 0;\n}\n```\n'}}]);